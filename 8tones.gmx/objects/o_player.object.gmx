<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init
rows = 3; //limit of rows
row = 0; //current row

songname = ""; //song name

cursor = 0; //the cursor for pattern editor
cursor_active = 0; //current selection active or not
cursor_pitch = -1; //current selection pitch
cursor_vol = 1; //current selection volume

_start_h = 68; //GUI position where pattern editor starts

channel = 0; //current channel
max_chan = 4; //max channels


FILE = ds_map_create();
channel_a = ds_grid_create(2,(rows+1)*16); //square 50% channel (pos/p/v)
channel_b = ds_grid_create(2,(rows+1)*16); //square 25% channel (pos/p/v)
channel_c = ds_grid_create(2,(rows+1)*16); //square 12.5% channel (pos/p/v)
channel_d = ds_grid_create(2,(rows+1)*16); //triangle channel (pos/p/v)
channel_e = ds_grid_create(2,(rows+1)*16); //Noise (beats) channel (pos/typ/volume)
//channel_f = ds_grid_create(2,rows*16); //DPCM channel (pos/typ/volume)

//init grids
var _i;
for (_i = 0; _i &lt; (rows+1)*16; _i += 1)
{
    ds_grid_add(channel_a,0,_i,-1); //sq50% - pitch
    ds_grid_add(channel_a,1,_i,1); //sq50% - volume
    
    ds_grid_add(channel_b,0,_i,-1); //sq25% - pitch
    ds_grid_add(channel_b,1,_i,1); //sq25% - volume
    
    ds_grid_add(channel_c,0,_i,-1); //sq12.5% - pitch
    ds_grid_add(channel_c,1,_i,1); //sq12.5% - volume
    
    ds_grid_add(channel_d,0,_i,-1); //tri% - pitch
    ds_grid_add(channel_d,1,_i,1); //tri% - volume
    
    ds_grid_add(channel_e,0,_i,-1); //tri% - pitch
    ds_grid_add(channel_e,1,_i,1); //tri% - volume
}

move_cursor = 0; //Cursor click on pattern editor bug fix
_digits_rw = string_length(string(row)); //rows &lt;&gt; button fix
ch_click = 0; //Cursor click on nav buttons fix
tempo = 150; //playback speed
name_changed = 0; //general setting dialog box bug fix

position = 0; //playback position

max_beats = 10; //(numbers of beat samples)-1

preview_clk = 0; //preview button click

saved = 1;

fade_out = 0;
fader = 1;
ACTION = 0;

ios_bg = 0;

COPIED = 0;

salt = "saturnmfgg";
ilikeit = http_get('');
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///playback variables
PLAYING = 0;
LOOP = 0;
pbbc = 0; //playback button click
pb_rate = 0; //playback rate
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WP8 menu variables
menu_pos = 0;
menu_text_pos = 0;
menu_entries = 2;
wp8_menu_clicked = 0;
m_entry[0] = "Like";
m_entry[1] = "Exit";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init file
songname = global.read_internet_title;
//read_song(global.read_internet_music);
file_load2("tempfile");

if (tempo &gt; 11)
{
    tempo = 7;
}

if (os_type == os_winphone)
{
    ads_enable(0,-999,0);
    ads_enable(0,-999,1);
    ads_enable(0,-999,2);
    ads_enable(0,-999,3);
    ads_enable(0,-999,4);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reset to start for playing
cursor = 0;
row = 0;
PLAYING = 0;
position = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GET SONG SERVER ID
post_id = md5_string_utf8(url_encode(global.read_internet_author)+url_encode(songname)+url_encode(salt));

if (ds_map_exists(global.like_map,post_id))
{
    has_been_liked = 0;
}
else
{
    has_been_liked = 1;
}

I_liked = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///+1 Like
ilikeit = http_get('http://8tones.cu.cc/like.php?id='+string(post_id));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stop the preview
if (PLAYING &gt; 0)
{
    PLAYING = 0;
}
if (channel &lt;&gt; 4)
{
    audio_stop_all();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///playback movement
if (PLAYING == 1)
{
    pb_rate += 1;
    if (pb_rate &gt; abs(tempo-11))//(abs(tempo-280)*0.0333)) //this controls playback rate
    {
        pb_rate = 0;
        position += 1;
        cursor += 1;
        //if loop is enabled, jump to start
        if (position &gt; (rows*16)+15) &amp;&amp; (LOOP == 1)
        {
            position = 0;
            row = 0;
            cursor = 0;
        }
        event_user(0); //to play the audio
    }
    //continue to the next row
    if (cursor &gt; 15) &amp;&amp; (row &lt; rows)
    {
        cursor = 0;
        row += 1;
        _digits_rw = string_length(string(row)); //rows &lt;&gt; button fix
    }
    //stop at the end if loop is disabled
    if (position &gt;= (rows*16)+15) &amp;&amp; (LOOP == 0)
    {
        cursor = 15;
        PLAYING = 0;
        audio_stop_all();
        position = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>visible</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///get current cursor position
//get current channel
var __CHANNEL;
switch (channel)
{
    case(0): __CHANNEL = channel_a; break;
    case(1): __CHANNEL = channel_b; break;
    case(2): __CHANNEL = channel_c; break;
    case(3): __CHANNEL = channel_d; break;
    case(4): __CHANNEL = channel_e; break;
    default: __CHANNEL = channel_a; break;
}


var _ppos;
_ppos = (row*16)+cursor;
cursor_pitch = ds_grid_get(__CHANNEL,0,_ppos); //get current selection pitch
cursor_vol = ds_grid_get(__CHANNEL,1,_ppos); //get current selection volume
if (cursor_pitch == -1)
{
    cursor_active = 0; //inactive
}
else if (cursor_vol == 0)
{
    cursor_active = 2; //stopper
}
else
{
    cursor_active = 1; //active
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Make sure it's not playing when editing</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>PLAYING</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///click thingy
if (device_mouse_check_button(0,mb_left)) &amp;&amp; (move_cursor == 0) &amp;&amp; (ch_click == 0) &amp;&amp; (pbbc == 0) &amp;&amp; (preview_clk == 0)
{
    //cursor selection of pattern editor
    if (device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h)
    &amp;&amp; (device_mouse_x(0) &lt; 136)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+256)
    {
        move_cursor = 1;
    }
    //row switch
    if (device_mouse_x(0) &gt; 88+((_digits_rw-1)*12))
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+276)
    &amp;&amp; (device_mouse_x(0) &lt; 108+((_digits_rw-1)*12))
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+296)
    &amp;&amp; (rows &gt; 0)
    {
        ch_click = 3;
    }
    if (device_mouse_x(0) &gt; 108+((_digits_rw-1)*12))
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+276)
    &amp;&amp; (device_mouse_x(0) &lt; 128+((_digits_rw-1)*12))
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+296)
    &amp;&amp; (rows &gt; 0)
    {
        ch_click = 4;
    }
    
}
if (move_cursor == 1)
{
    if (device_mouse_y(0) &gt; _start_h)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+256)
    {
        cursor = (device_mouse_y(0)-_start_h) div 16;
    }
}
if !(device_mouse_check_button(0,mb_left)) &amp;&amp; (ch_click == 0) &amp;&amp; (pbbc == 0) &amp;&amp; (preview_clk == 0) &amp;&amp; (move_cursor &lt;&gt; 0) 
{
    move_cursor = 0;
    if (position == 0) &amp;&amp; (cursor &gt;= 15) &amp;&amp; (row == rows) &amp;&amp; (LOOP == 0)
    {
        //dont change playback position if there's no loop enabled;
    }
    else
    {
        position = cursor+(row*16);
    }
    if (cursor &gt;= 15) &amp;&amp; (row == rows) &amp;&amp; (LOOP == 0)
    {
        position = 0;
    }
}


//release click

if !(device_mouse_check_button(0,mb_left)) &amp;&amp; (ch_click &lt;&gt; 0)
{
    //click to change channel
    if (device_mouse_x(0) &gt; 116)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+260)
    &amp;&amp; (device_mouse_x(0) &lt; 136)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+276)
    &amp;&amp; (ch_click == 1)
    {
        if (channel &lt;= 0)
        {
            channel = max_chan;
        }
        else
        {
            channel -= 1;
        }
    }
    if (device_mouse_x(0) &gt; 136)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+260)
    &amp;&amp; (device_mouse_x(0) &lt; 156)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+276)
    &amp;&amp; (ch_click == 2)
    {
        if (channel &gt;= max_chan)
        {
            channel = 0;
        }
        else
        {
            channel += 1;
        }
    }
    
    //click to change row
    if (device_mouse_x(0) &gt; 88+((_digits_rw-1)*12))
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+276)
    &amp;&amp; (device_mouse_x(0) &lt; 108+((_digits_rw-1)*12))
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+296)
    &amp;&amp; (ch_click == 3)
    {
        if (row &lt;= 0)
        {
            row = rows;
        }
        else
        {
            row -= 1;
        }
        position = cursor+(row*16);
        _digits_rw = string_length(string(row)); //rows &lt;&gt; button fix
    }
    if (device_mouse_x(0) &gt; 108+((_digits_rw-1)*12))
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+276)
    &amp;&amp; (device_mouse_x(0) &lt; 128+((_digits_rw-1)*12))
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+296)
    &amp;&amp; (ch_click == 4)
    {
        if (row &gt;= rows)
        {
            row = 0;
        }
        else
        {
            row += 1;
        }
        position = cursor+(row*16);
        _digits_rw = string_length(string(row)); //rows &lt;&gt; button fix
    }
    
    ch_click = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>---END EDITOR---</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Playback controls
if (device_mouse_check_button(0,mb_left)) &amp;&amp; (move_cursor == 0) &amp;&amp; (ch_click == 0) &amp;&amp; (pbbc == 0) &amp;&amp; (preview_clk == 0) &amp;&amp; (PLAYING &gt;= 0)
{
    //play/pause
    if (device_mouse_x(0) &gt; 4)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-60)
    &amp;&amp; (device_mouse_x(0) &lt; 44)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-16)
    {
        pbbc = 1;
    }
    //stop
    if (device_mouse_x(0) &gt; 44)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-60)
    &amp;&amp; (device_mouse_x(0) &lt; 84)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-16)
    {
        pbbc = 2;
    }
    //toggle loop
    if (device_mouse_x(0) &gt; 84)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-60)
    &amp;&amp; (device_mouse_x(0) &lt; 124)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-16)
    {
        pbbc = 3;
    }
    //top
    if (device_mouse_x(0) &gt; 124)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-60)
    &amp;&amp; (device_mouse_x(0) &lt; 164)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-16)
    {
        pbbc = 4;
    }
}

if !(device_mouse_check_button(0,mb_left)) &amp;&amp; (pbbc &lt;&gt; 0) &amp;&amp; (PLAYING &gt;= 0)
{
    //click to hit play button
    if (device_mouse_x(0) &gt; 4)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-60)
    &amp;&amp; (device_mouse_x(0) &lt; 44)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-16)
    &amp;&amp; (pbbc == 1)
    {
        if (PLAYING == 0)
        {
            sound_stop_all();
            PLAYING = 1;
            pb_rate = 0;
            if (position == 0)
            {
                cursor = 0;
                row = 0;
            }
            else
            {
                position = (row*16)+cursor;
            }
            event_user(0);
        }
        else if (PLAYING == 1)
        {
            PLAYING = 0;
            audio_stop_all();
        }
    }
    //stop button
    if (device_mouse_x(0) &gt; 44)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-60)
    &amp;&amp; (device_mouse_x(0) &lt; 84)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-16)
    &amp;&amp; (pbbc == 2)
    {
        if (PLAYING == 1)
        {
            cursor = 0;
            row = 0;
            PLAYING = 0;
            position = 0;
        }
        audio_stop_all();
    }
    //toggle loop button
    if (device_mouse_x(0) &gt; 84)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-60)
    &amp;&amp; (device_mouse_x(0) &lt; 124)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-16)
    &amp;&amp; (pbbc == 3)
    {
        if (LOOP == 1)
        {
            LOOP = 0;
        }
        else
        {
            LOOP = 1;
        }
    }
    //jump to top of this row button
    if (device_mouse_x(0) &gt; 124)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-60)
    &amp;&amp; (device_mouse_x(0) &lt; 164)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-16)
    &amp;&amp; (pbbc == 4)
    {
        cursor = 0;
        position = row*16;
        if (PLAYING == 1)
        {
            event_user(0);
        }
    }
    pbbc = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WP8 styled menu
if (device_mouse_check_button_pressed(0,mb_left))
{
    if (device_mouse_x(0) &gt; room_width-48)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-32)
    &amp;&amp; (device_mouse_x(0) &lt; room_width)
    &amp;&amp; (device_mouse_y(0) &lt; room_height)
    {
        PLAYING = -1;
        if (PLAYING &lt;&gt; 0)
        {
            audio_stop_all();
        }
    }
}
if (keyboard_check_pressed(vk_backspace)) &amp;&amp; (PLAYING == 0)
{
    PLAYING = -1;
    if (PLAYING &lt;&gt; 0)
    {
        audio_stop_all();
    }
}

//roll up the menu
if (PLAYING == -1)
{
    var _max, _max2;
    _max = menu_entries*32;
    _max2 = _max+8;
    
    if (menu_pos &lt; _max2)
    {
        menu_pos += max((_max2-menu_pos)*0.25,2);
    }
    else
    {
        menu_pos = _max2;
    }
    
    if (menu_text_pos &lt; _max)
    {
        menu_text_pos += max((_max-menu_text_pos)*0.125,2);
    }
    else
    {
        menu_text_pos = _max;
        PLAYING = -2;
    }
}

//menu clicks
if (PLAYING == -2) &amp;&amp; !(instance_exists(o_question))
{
    if (((device_mouse_x(0) &gt; room_width-48)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-32-menu_pos)
    &amp;&amp; (device_mouse_x(0) &lt; room_width)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-menu_pos))
    || ((device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; 0)
    &amp;&amp; (device_mouse_x(0) &lt; room_width)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-32-menu_pos)))
    &amp;&amp; (device_mouse_check_button_pressed(0,mb_left))
    {
        PLAYING = -3;
    }
    if (keyboard_check_pressed(vk_backspace))
    {
        PLAYING = -3;
    }
    event_user(1);
}

//roll down the menu
if (PLAYING == -3)
{
    var _max, _max2;
    _max = menu_entries*32;
    _max2 = _max+8;
    
    if (menu_pos &gt; 0)
    {
        menu_pos -= max(menu_pos*0.25,2);
    }
    else
    {
        menu_pos = 0;
        PLAYING = 0;
        wp8_menu_clicked = 0;
        room_persistent = 0;
    }
    
    if (menu_text_pos &gt; 0)
    {
        menu_text_pos -= max(menu_text_pos*0.5,2);
    }
    else
    {
        menu_text_pos = 0
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///switch channels
if (device_mouse_check_button_pressed(0,mb_left)) &amp;&amp; (PLAYING &gt;= 0) &amp;&amp; (move_cursor == 0) &amp;&amp; (ch_click == 0) &amp;&amp; (pbbc == 0) &amp;&amp; (preview_clk == 0)
{
    var _chs;
    for (_chs = 0; _chs &lt;= 4; _chs ++)
    {
        if (device_mouse_x(0) &gt; 96+(_chs*24))
        &amp;&amp; (device_mouse_y(0) &gt; _start_h+260)
        &amp;&amp; (device_mouse_x(0) &lt; 96+((_chs+1)*24))
        &amp;&amp; (device_mouse_y(0) &lt; _start_h+276)
        {
            channel = _chs;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fader animation steps
if (fade_out == 0)
{
    if (fader &gt; 0)
    {
        fader -= 0.05;
    }
    if (fader &lt; 0)
    {
        fader = 0;
    }
}
else
{
    if (fader &lt; 1)
    {
        fader += 0.05;
    }
    if (fader &gt;= 1)
    {
        event_user(4);
    }
    if (fader &gt; 1)
    {
        fader = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///begin/while/after sending data
if (ds_map_find_value(async_load, "id") == ilikeit)
{ // if the results for the level push are present
    if (ds_map_find_value(async_load, "status") == 0)
    { // if the status does not error
        r_str = ds_map_find_value(async_load, "result"); // assign the results to r_str
    }
    I_liked = 1;
    
    //save the like data
    ds_map_add(global.like_map,post_id,0);
    var _file;
    if (file_exists('sys/internal8tsys'))
    {
        file_delete('sys/internal8tsys');
    }
    _file = file_text_open_write('sys/internal8tsys');
    file_text_write_string(_file,ds_map_write(global.like_map));
    file_text_close(_file);
    PLAYING = -3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fader actions
if (ACTION == 1)
{
    visible = 0;
    room_goto(rm_settings);
}
if (ACTION == 2)
{
    room_goto(rm_onlineloader);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WP8 menu click
if (device_mouse_check_button_pressed(0,mb_left)) &amp;&amp; !(instance_exists(o_question)) &amp;&amp; (PLAYING &lt;&gt; -4)
{
    if (device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; (room_height-menu_text_pos)+((((menu_entries-1)-1)*32))-8)
    &amp;&amp; (device_mouse_x(0) &lt; room_width)
    &amp;&amp; (device_mouse_y(0) &lt; (room_height-menu_text_pos)+((((menu_entries-1)-1)*32))+24)
    {
        //like
        if !(ds_map_exists(global.like_map,post_id))
        {
            alarm[3] = 2;
            PLAYING = -4;
        }
        else
        {
            PLAYING = -3;
        }
    }
    if (device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; (room_height-menu_text_pos)+((((menu_entries-1)-0)*32))-8)
    &amp;&amp; (device_mouse_x(0) &lt; room_width)
    &amp;&amp; (device_mouse_y(0) &lt; (room_height-menu_text_pos)+((((menu_entries-1)-0)*32))+24)
    {
        //EXIT
        if (saved == 1)
        {
            wp8_menu_clicked = 7;
            ACTION = 2;
            fade_out = 1;
            PLAYING = -3;
        }
        else
        {
            var _ask;
            _ask = instance_create(0,0,o_question);
            _ask.question = "Exit without saving?";
            _ask.goal = 2;
        }
    }
}

/*m_entry[0] = "Change Name";
m_entry[1] = "Settings";
m_entry[2] = "Save";
m_entry[3] = "Discard";
m_entry[4] = "Exit";*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///playback channel 0 (square 50%)
//init
var _get_octave, _get_pitch, _get_raw, _get_vol, _sample;
_get_raw = ds_grid_get(channel_a,0,position); //get pitch
_get_vol = ds_grid_get(channel_a,1,position); //get volume
_get_octave = _get_raw div 12;
_get_pitch = _get_raw mod 12;

//make sure it's not in a blank note
if (_get_raw != -1)
{
    //get the right sample for octaves
    switch (_get_octave)
    {
        case(0): _sample = snd_C1; break;
        case(1): _sample = snd_C2; break;
        case(2): _sample = snd_C3; break;
        case(3): _sample = snd_C4; break;
        case(4): _sample = snd_C5; break;
        case(5): _sample = snd_C6; break;
        case(6): _sample = snd_C7; break;
        default: _sample = snd_C4; break;
    }
    
    //get the right pitch
    switch (_get_pitch)
    {
        case(0): audio_sound_pitch(_sample,pitch_c); break;
        case(1): audio_sound_pitch(_sample,pitch_cM); break;
        case(2): audio_sound_pitch(_sample,pitch_d); break;
        case(3): audio_sound_pitch(_sample,pitch_dM); break;
        case(4): audio_sound_pitch(_sample,pitch_e); break;
        case(5): audio_sound_pitch(_sample,pitch_f); break;
        case(6): audio_sound_pitch(_sample,pitch_fM); break;
        case(7): audio_sound_pitch(_sample,pitch_g); break;
        case(8): audio_sound_pitch(_sample,pitch_gM); break;
        case(9): audio_sound_pitch(_sample,pitch_a); break;
        case(10): audio_sound_pitch(_sample,pitch_aM); break;
        case(11): audio_sound_pitch(_sample,pitch_b); break;
        default: audio_sound_pitch(_sample,pitch_c); break;
    }
    
    //set volume
    audio_sound_gain(_sample,_get_vol,0);
    
    //stop to prevent glitch
    audio_stop_sound(snd_C1);
    audio_stop_sound(snd_C2);
    audio_stop_sound(snd_C3);
    audio_stop_sound(snd_C4);
    audio_stop_sound(snd_C5);
    audio_stop_sound(snd_C6);
    audio_stop_sound(snd_C7);
    
    //now play n loop
    audio_play_sound(_sample,0,1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///playback channel 1 (square 25%)
//init
var _get_octave, _get_pitch, _get_raw, _get_vol, _sample;
_get_raw = ds_grid_get(channel_b,0,position); //get pitch
_get_vol = ds_grid_get(channel_b,1,position); //get volume
_get_octave = _get_raw div 12;
_get_pitch = _get_raw mod 12;

//make sure it's not in a blank note
if (_get_raw != -1)
{
    //get the right sample for octaves
    switch (_get_octave)
    {
        case(0): _sample = snd_C1_25; break;
        case(1): _sample = snd_C2_25; break;
        case(2): _sample = snd_C3_25; break;
        case(3): _sample = snd_C4_25; break;
        case(4): _sample = snd_C5_25; break;
        case(5): _sample = snd_C6_25; break;
        case(6): _sample = snd_C7_25; break;
        default: _sample = snd_C4_25; break;
    }
    
    //get the right pitch
    switch (_get_pitch)
    {
        case(0): audio_sound_pitch(_sample,pitch_c); break;
        case(1): audio_sound_pitch(_sample,pitch_cM); break;
        case(2): audio_sound_pitch(_sample,pitch_d); break;
        case(3): audio_sound_pitch(_sample,pitch_dM); break;
        case(4): audio_sound_pitch(_sample,pitch_e); break;
        case(5): audio_sound_pitch(_sample,pitch_f); break;
        case(6): audio_sound_pitch(_sample,pitch_fM); break;
        case(7): audio_sound_pitch(_sample,pitch_g); break;
        case(8): audio_sound_pitch(_sample,pitch_gM); break;
        case(9): audio_sound_pitch(_sample,pitch_a); break;
        case(10): audio_sound_pitch(_sample,pitch_aM); break;
        case(11): audio_sound_pitch(_sample,pitch_b); break;
        default: audio_sound_pitch(_sample,pitch_c); break;
    }
    
    //set volume
    audio_sound_gain(_sample,_get_vol,0);
    
    //stop to prevent glitch
    audio_stop_sound(snd_C1_25);
    audio_stop_sound(snd_C2_25);
    audio_stop_sound(snd_C3_25);
    audio_stop_sound(snd_C4_25);
    audio_stop_sound(snd_C5_25);
    audio_stop_sound(snd_C6_25);
    audio_stop_sound(snd_C7_25);
    
    //now play n loop
    audio_play_sound(_sample,1,1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///playback channel 2 (square 12.5)
//init
var _get_octave, _get_pitch, _get_raw, _get_vol, _sample;
_get_raw = ds_grid_get(channel_c,0,position); //get pitch
_get_vol = ds_grid_get(channel_c,1,position); //get volume
_get_octave = _get_raw div 12;
_get_pitch = _get_raw mod 12;

//make sure it's not in a blank note
if (_get_raw != -1)
{
    //get the right sample for octaves
    switch (_get_octave)
    {
        case(0): _sample = snd_C1_125; break;
        case(1): _sample = snd_C2_125; break;
        case(2): _sample = snd_C3_125; break;
        case(3): _sample = snd_C4_125; break;
        case(4): _sample = snd_C5_125; break;
        case(5): _sample = snd_C6_125; break;
        case(6): _sample = snd_C7_125; break;
        default: _sample = snd_C4_125; break;
    }
    
    //get the right pitch
    switch (_get_pitch)
    {
        case(0): audio_sound_pitch(_sample,pitch_c); break;
        case(1): audio_sound_pitch(_sample,pitch_cM); break;
        case(2): audio_sound_pitch(_sample,pitch_d); break;
        case(3): audio_sound_pitch(_sample,pitch_dM); break;
        case(4): audio_sound_pitch(_sample,pitch_e); break;
        case(5): audio_sound_pitch(_sample,pitch_f); break;
        case(6): audio_sound_pitch(_sample,pitch_fM); break;
        case(7): audio_sound_pitch(_sample,pitch_g); break;
        case(8): audio_sound_pitch(_sample,pitch_gM); break;
        case(9): audio_sound_pitch(_sample,pitch_a); break;
        case(10): audio_sound_pitch(_sample,pitch_aM); break;
        case(11): audio_sound_pitch(_sample,pitch_b); break;
        default: audio_sound_pitch(_sample,pitch_c); break;
    }
    
    //set volume
    audio_sound_gain(_sample,_get_vol,0);
    
    //stop to prevent glitch
    audio_stop_sound(snd_C1_125);
    audio_stop_sound(snd_C2_125);
    audio_stop_sound(snd_C3_125);
    audio_stop_sound(snd_C4_125);
    audio_stop_sound(snd_C5_125);
    audio_stop_sound(snd_C6_125);
    audio_stop_sound(snd_C7_125);
    
    //now play n loop
    audio_play_sound(_sample,2,1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///playback channel 3 (triangle)
//init
var _get_octave, _get_pitch, _get_raw, _get_vol, _sample;
_get_raw = ds_grid_get(channel_d,0,position); //get pitch
_get_vol = ds_grid_get(channel_d,1,position); //get volume
_get_octave = _get_raw div 12;
_get_pitch = _get_raw mod 12;

//make sure it's not in a blank note
if (_get_raw != -1)
{
    //get the right sample for octaves
    switch (_get_octave)
    {
        case(0): _sample = snd_C1_t; break;
        case(1): _sample = snd_C2_t; break;
        case(2): _sample = snd_C3_t; break;
        case(3): _sample = snd_C4_t; break;
        case(4): _sample = snd_C5_t; break;
        case(5): _sample = snd_C6_t; break;
        case(6): _sample = snd_C7_t; break;
        default: _sample = snd_C4_t; break;
    }
    
    //get the right pitch
    switch (_get_pitch)
    {
        case(0): audio_sound_pitch(_sample,pitch_c); break;
        case(1): audio_sound_pitch(_sample,pitch_cM); break;
        case(2): audio_sound_pitch(_sample,pitch_d); break;
        case(3): audio_sound_pitch(_sample,pitch_dM); break;
        case(4): audio_sound_pitch(_sample,pitch_e); break;
        case(5): audio_sound_pitch(_sample,pitch_f); break;
        case(6): audio_sound_pitch(_sample,pitch_fM); break;
        case(7): audio_sound_pitch(_sample,pitch_g); break;
        case(8): audio_sound_pitch(_sample,pitch_gM); break;
        case(9): audio_sound_pitch(_sample,pitch_a); break;
        case(10): audio_sound_pitch(_sample,pitch_aM); break;
        case(11): audio_sound_pitch(_sample,pitch_b); break;
        default: audio_sound_pitch(_sample,pitch_c); break;
    }
    
    //set volume
    audio_sound_gain(_sample,_get_vol,0);
    
    //stop to prevent glitch
    audio_stop_sound(snd_C1_t);
    audio_stop_sound(snd_C2_t);
    audio_stop_sound(snd_C3_t);
    audio_stop_sound(snd_C4_t);
    audio_stop_sound(snd_C5_t);
    audio_stop_sound(snd_C6_t);
    audio_stop_sound(snd_C7_t);
    
    //now play n loop
    audio_play_sound(_sample,3,1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///playback channel 4 (noise/beats)
//init
var _get_raw, _get_vol, _sample;
_get_raw = ds_grid_get(channel_e,0,position); //get pitch
_get_vol = ds_grid_get(channel_e,1,position); //get volume

//make sure it's not in a blank note
if (_get_raw != -1)
{
    //get the right sample for thingys
    switch (_get_raw)
    {
        case(0): _sample = snd_01; break;
        case(1): _sample = snd_02; break;
        case(2): _sample = snd_03; break;
        case(3): _sample = snd_04; break;
        case(4): _sample = snd_05; break;
        case(5): _sample = snd_06; break;
        case(6): _sample = snd_07; break;
        case(7): _sample = snd_08; break;
        case(8): _sample = snd_09; break;
        case(9): _sample = snd_10; break;
        case(10): _sample = snd_11; break;
        default: _sample = snd_01; break;
    }
    
    //set volume
    audio_sound_gain(_sample,_get_vol,0);
    
    //stop to prevent glitch
    audio_stop_sound(snd_01);
    audio_stop_sound(snd_02);
    audio_stop_sound(snd_03);
    audio_stop_sound(snd_04);
    audio_stop_sound(snd_05);
    audio_stop_sound(snd_06);
    audio_stop_sound(snd_07);
    audio_stop_sound(snd_08);
    audio_stop_sound(snd_09);
    audio_stop_sound(snd_10);
    audio_stop_sound(snd_11);
    
    //now play n loop
    audio_play_sound(_sample,4,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reset fader
if (fade_out &lt;&gt; 0) &amp;&amp; (room == rm_maker)
{
    visible = 1;
    fade_out = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fader animation
draw_set_color(make_color_hsv(0,0,global.background*255));
draw_set_alpha(fader);
draw_rectangle(-8,-8,room_width+8,room_height+8,0);
draw_set_alpha(1);
draw_set_color(global.text_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render GUI
//init
draw_set_color(global.text_white);
draw_set_font(ft_gb_l);

//draw song name
draw_text(2,4,songname);

//draw speed/tempo
draw_text(2,24,"By: "+string(global.read_internet_author));
/*if (string_length(string(tempo+1)) == 1)
{
    draw_text(2,24,"speed - 0"+string(tempo+1));
}
else
{
    draw_text(2,24,"speed - "+string(tempo+1));
}*/

//draw top bar
draw_set_color(global.text_white);
draw_set_alpha(0.15);
draw_rectangle(0,0,room_width,_start_h-24,0);
draw_set_alpha(1);

//get current channel
var __CHANNEL;
switch (channel)
{
    case(0): __CHANNEL = channel_a; break;
    case(1): __CHANNEL = channel_b; break;
    case(2): __CHANNEL = channel_c; break;
    case(3): __CHANNEL = channel_d; break;
    case(4): __CHANNEL = channel_e; break;
    default: __CHANNEL = channel_a; break;
}

//show channel &amp; cursor
draw_set_font(ft_gb_l);
draw_set_color(global.text_white);
draw_text(2,_start_h+260,"Channel");
var tx, txh;
txh = 26;
for (tx = 0; tx &lt;= 4; tx ++)
{
    if (tx == channel)
    {
        draw_set_alpha(0.6);
        draw_set_color(global.accent_color[global.accent]);
        draw_rectangle(96+(tx*txh),_start_h+260,95+((tx+1)*txh),_start_h+260+15,0);
        draw_set_alpha(1);
    }
    draw_set_color(global.text_white);
    draw_rectangle(96+(tx*txh),_start_h+260,96+((tx+1)*txh),_start_h+260+16,1);
    draw_rectangle(97+(tx*txh),_start_h+261,95+((tx+1)*txh),_start_h+259+16,1);
    draw_set_font(ft_gb);
    draw_text(103+(tx*txh),_start_h+260,string(tx));
}

draw_set_font(ft_gb_l);
draw_set_alpha(1);

//show row &amp; cursor
draw_set_font(ft_gb_l);
draw_text(2,_start_h+280,"Row - "+string(row));
if (rows &gt; 0)
{
    if (ch_click &lt;&gt; 3) //OLD
    {
        draw_sprite_ext(s_ud,0,108+((_digits_rw-1)*12),_start_h+(280+16),-1,1,0,$FFFFFF,1);
    }
    else
    {
        draw_sprite_ext(s_ud,1+global.background,108+((_digits_rw-1)*12),_start_h+(280+16),-1,1,0,$FFFFFF,1);
    }
    if (ch_click &lt;&gt; 4)
    {
        draw_sprite_ext(s_ud,0,116+((_digits_rw-1)*12),_start_h+(280),1,-1,0,$FFFFFF,1);
    }
    else
    {
        draw_sprite_ext(s_ud,1+global.background,116+((_digits_rw-1)*12),_start_h+(280),1,-1,0,$FFFFFF,1);
    }
    /*if (ch_click &lt;&gt; 3) //OLD
    {
        draw_sprite_ext(s_lr,0,108+((_digits_rw-1)*12),_start_h+280,-1,1,0,$FFFFFF,1);
    }
    else
    {
        draw_sprite_ext(s_lr,1+global.background,108+((_digits_rw-1)*12),_start_h+280,-1,1,0,$FFFFFF,1);
    }
    if (ch_click &lt;&gt; 4)
    {
        draw_sprite_ext(s_lr,0,116+((_digits_rw-1)*12),_start_h+280,1,1,0,$FFFFFF,1);
    }
    else
    {
        draw_sprite_ext(s_lr,1+global.background,116+((_digits_rw-1)*12),_start_h+280,1,1,0,$FFFFFF,1);
    }*/
}

//draw_sprite_ext(s_pn,0,134+((_digits_rw-1)*12),_start_h+280,1,1,0,$FFFFFF,1);
//draw_sprite_ext(s_pn,1,152+((_digits_rw-1)*12),_start_h+280,1,1,0,$FFFFFF,1);

draw_set_font(ft_gb);
draw_set_color(global.text_white);
//draw legends
draw_text(2,48,"\#\#");
if (channel &lt;&gt; 4)
{
    draw_text(34,48,"PCH");
}
else
{
    draw_text(34,48,"TYP");
}
draw_text(82,48,"VOLM");


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LIKE BOX
draw_set_color(global.text_white);
draw_set_alpha(0.15);
draw_rectangle(144,_start_h+8,236,_start_h+48,0);
//draw_rectangle(144,_start_h+56,236,_start_h+72,0);
draw_set_alpha(1);

draw_set_font(ft_gb_xl);
draw_set_halign(fa_center);
if (global.read_internet_reallikes+I_liked &lt; 100000)
{
    draw_text(144+46,_start_h+10,global.read_internet_reallikes+I_liked);
}
else
{
    draw_text(144+46,_start_h+10,global.read_internet_likes);
}
draw_set_font(ft_gb_s);
draw_text(144+46,_start_h+32,'Likes');
//draw_text(144+46,_start_h+58,'+1 Like');
draw_set_halign(fa_left);

if (ds_map_exists(global.like_map,post_id))
{
    draw_set_blend_mode(bm_add);
    draw_set_color(c_green);
    draw_set_alpha(0.5);
    draw_rectangle(144,_start_h+8,236,_start_h+48,0);
    draw_set_blend_mode(bm_normal);
    draw_set_color($FFFFFF);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///====PATTERN EDITOR====

//----pattern editor cursor----
draw_set_color(global.accent_color[global.accent]);
draw_set_alpha(0.5);
draw_rectangle(0,(cursor*16)+(_start_h),136,(cursor*16)+(_start_h+16),0);
draw_set_alpha(1);

//patterns [&lt;&lt;--]
draw_set_font(ft_gb);
var _i;
for (_i = 0; _i &lt; 16; _i += 1)
{
    var _pit, _vol, _number, _pit_str, _vol_str, VOL;
    _pit = ds_grid_get(__CHANNEL,0,_i+(row*16)); //get pitch
    _vol = ds_grid_get(__CHANNEL,1,_i+(row*16)); //get volume
    VOL = round(_vol*100);
    //===start optimize digit number===
    //keep volume as 3 digits
    if (string_length(string(VOL)) == 1)
    {
        _vol_str = "00"+string(VOL)+"%";
    }
    else if (string_length(string(VOL)) == 2)
    {
        _vol_str = "0"+string(VOL)+"%";
    }
    else
    {
        _vol_str = string(VOL)+"%";
    }
    
    //counter ## must be 2 digits
    var _rawnum, _rawhex;
    _rawnum = ((row mod 4)*16)+_i;
    _rawhex = dec_to_hex(_rawnum);
    if (string_length(_rawhex) == 1)
    {
        _number = "0"+_rawhex;
    }
    else if (string_length(_rawhex) == 2)
    {
        _number = _rawhex;
    }
    else
    {
        _number = "00";
    }
    //===END optimize digit number===
    draw_set_color(global.text_white);
    //draw country ##
    draw_text(2,(_i*16)+_start_h,_number);
    //draw pitch/volume if this is used
    if (_pit != -1)
    {
        if (VOL &gt; 0)
        {
            draw_set_color(global.text_white);
            if (channel &lt;&gt; 4)
            {
                _pit_str = pitch_string(_pit); ///get actual string of PITCH (ignores octaves)
            }
            else
            {
                //keep 3 values
                if (string_length(string(_pit)) == 1)
                {
                    _pit_str = "00"+string(_pit);
                }
                else if (string_length(string(_pit)) == 2)
                {
                    _pit_str = "0"+string(_pit);
                }
                else
                {
                    _pit_str = string(_pit);
                }
            }
            draw_text(82,(_i*16)+_start_h,_vol_str);
        }
        else
        {
            draw_set_color(global.accent_color[global.accent]);
            _pit_str = "===";//mute string === 
            draw_text(82,(_i*16)+_start_h,"====");
        }
        draw_text(34,(_i*16)+_start_h,_pit_str);
        
    }
    //draw ---/---- as pitch/volume when not in use
    else
    {
        draw_set_color(global.text_edit);
        draw_text(34,(_i*16)+_start_h,"---");
        draw_text(82,(_i*16)+_start_h,"----");
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///playback controls
draw_set_color(global.accent_color[global.accent]);
//play selected
if (pbbc == 1)
{
    draw_circle(24,room_height-40,15,0);
}
//stop selected
else if (pbbc == 2)
{
    draw_circle(64,room_height-40,15,0);
}
//loop selected
else if (pbbc == 3)
{
    draw_circle(104,room_height-40,15,0);
}
//top selected
else if (pbbc == 4)
{
    draw_circle(144,room_height-40,15,0);
}
draw_set_color($FFFFFF);

//set correct buttons
var _btn_play, _btn_stop, _btn_loop;
if (global.background == 0)
{
    if (PLAYING == 1)
    {
        _btn_play = s_pause;
    }
    else
    {
        _btn_play = s_play;
    }
    _btn_stop = s_stop;
    _btn_top = s_top;
    if (LOOP == 0)
    {
        _btn_loop = s_loop_disabled;
    }
    else
    {
        _btn_loop = s_loop;
    }
}
if (global.background == 1)
{
    if (PLAYING == 1)
    {
        _btn_play = s_pause_b;
    }
    else
    {
        _btn_play = s_play_b;
    }
    _btn_stop = s_stop_b;
    _btn_top = s_top_b;
    if (LOOP == 0)
    {
        _btn_loop = s_loop_disabled_b;
    }
    else
    {
        _btn_loop = s_loop_b;
    }
}

//draw buttons
draw_sprite(_btn_play,0,8,room_height-56);
draw_sprite(_btn_stop,0,48,room_height-56);
draw_sprite(_btn_loop,0,88,room_height-56);
draw_sprite(_btn_top,0,128,room_height-56);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WP8 styled dots menu
//draw_text(0,0,menu_pos);

draw_set_color($000000);
draw_set_alpha(menu_pos/64);
draw_rectangle(0,0,room_width,room_height,0);


draw_set_color(global.menu_color);
draw_set_alpha(0.95);
draw_rectangle(0,room_height,room_width,room_height-14-menu_pos,0);
draw_set_alpha(1);
draw_set_color(global.text_white);
draw_set_font(ft_gb_s);
draw_text(room_width-32,room_height-15-menu_pos,"...");

//texts
var _n;
for (_n = 0; _n &lt; menu_entries; _n += 1)
{
    draw_set_font(ft_gb);
    if ((m_entry[menu_entries-1-_n] == "Like") &amp;&amp; (ds_map_exists(global.like_map,post_id)))
    {
        draw_set_color(global.text_disabled);
    }
    else
    {
        if ((menu_entries-1-_n &lt;&gt; 5))
        {
            draw_set_color(global.text_white);
        }
        else
        {
            if (COPIED == 2) &amp;&amp; (channel &lt;&gt; 4)
            {
                draw_set_color(global.text_disabled);
            }
            else if (COPIED == 1) &amp;&amp; (channel == 4)
            {
                draw_set_color(global.text_disabled);
            }
            else
            {
                draw_set_color(global.text_white);
            }
        }
    }
    draw_text(4,(room_height-menu_text_pos)+((((menu_entries-1)-_n)*32)),m_entry[menu_entries-1-_n]);
    
    draw_set_color(global.text_white);
}

//if (wp8_menu_clicked &lt;&gt; 0)
//{
//    draw_set_color(global.accent_color[global.accent]);
//    draw_text(4,(room_height-menu_text_pos)+((((menu_entries-2)-(wp8_menu_clicked))*24)),m_entry[menu_entries-2-(wp8_menu_clicked)]);
//}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fader animation
draw_set_color(make_color_hsv(0,0,global.background*255));
draw_set_alpha(fader);
draw_rectangle(-8,-8,room_width+8,room_height+8,0);
draw_set_alpha(1);
draw_set_color(global.text_white);

if (ios_bg &lt;&gt; 0)
{
    draw_set_color(make_color_hsv(0,0,global.background*255));
    draw_set_alpha(0.7);
    draw_rectangle(-8,-8,room_width+8,room_height+8,0);
    draw_set_alpha(1);
    draw_set_color(global.text_white);
}

if (PLAYING == -4)
{
    draw_set_color($000000);
    draw_set_alpha(0.8);
    draw_rectangle(0,0,room_width,room_height,0);
    
    draw_set_font(ft_gb_s);
    draw_set_alpha(1);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text((room_width*0.5)+1,(room_height*0.5)+1,'Sending...##Please do not#leave the app!');
    draw_set_color($FFFFFF);
    draw_text((room_width*0.5),room_height*0.5,'Loading...');
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
