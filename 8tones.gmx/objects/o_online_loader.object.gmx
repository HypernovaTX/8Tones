<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INIT
BASEURL = "XXXXX";
salt = "PUT SALE HERE"; // a random phrase used for hashing - MAKE IT UNIQUE AND KEEP IT SECRET!!!

alpha = 0;
x1 = 0;
done = 0;
clicked = 0;

loading = 1;
loadstep = 0;
loaddot = '';
la = 0;
list_alpha = 0;
held = 0;
noitem = 0;

fetchData = http_get("");
fetchEdit = http_get("");
get = http_get("");
symbolOpen = chr(60); // open angled bracket
symbolClose = chr(62); // closed angeled bracket
symbolSlash = chr(47); // forward slash
loadedCount = 0;
page = global.page;
pages = 0;
error = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///REQUEST HTTP
if (os_is_network_connected())
{
    getrows = http_get(BASEURL+'/getrows.php');
    fetchData = http_get(BASEURL+'/pull.php?Type=1&amp;page='+string(global.page));
}
else
{
    error = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///entrance animation
if (x1 &lt; 0) &amp;&amp; (done == 0)
{
    x1 += max(abs(-x1)*0.2,1);
}
if (alpha &lt; 1) &amp;&amp; (done == 0)
{
    alpha += 0.05;
}

if (alpha &gt;= 1) &amp;&amp; (x1 &gt;= 0) &amp;&amp; (done == 0)
{
    done = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///click thingy
if (done == 1) &amp;&amp; (device_mouse_check_button(0,mb_left))
{
    //back button
    if (device_mouse_x(0) &gt; room_width-48)
    &amp;&amp; (device_mouse_y(0) &lt; 56)
    &amp;&amp; (clicked == 0)
    {
        clicked = -1;
    }
    
    //prev button
    if (device_mouse_x(0) &lt;= 32)
    &amp;&amp; (device_mouse_y(0) &gt; 390)
    &amp;&amp; (page &gt; 0)
    &amp;&amp; (loading == 0)
    &amp;&amp; (error == 0)
    &amp;&amp; (clicked == 0)
    {
        clicked = 1;
    }
    
    //next button
    if (device_mouse_x(0) &gt;= room_width-32)
    &amp;&amp; (device_mouse_y(0) &gt; 390)
    &amp;&amp; (page &lt; pages)
    &amp;&amp; (loading == 0)
    &amp;&amp; (error == 0)
    &amp;&amp; (clicked == 0)
    {
        clicked = 2;
    }
    
    //music list
    if (device_mouse_y(0) &gt;= 66)
    &amp;&amp; (device_mouse_y(0) &lt; 320+66)
    &amp;&amp; (loading == 0)
    &amp;&amp; (clicked == 0)
    &amp;&amp; (error == 0)
    {
        clicked = 3;
    }
}

//holding
if (done == 1) &amp;&amp; (device_mouse_check_button(0,mb_left))
{
    if (clicked == 3)
    {
        var c;
        for (c = 0; c &lt; 10; c ++)
        {
            if (device_mouse_y(0) &gt;= 66+(32*c))
            &amp;&amp; (device_mouse_y(0) &lt; 66+(32*(c+1)))
            {
                if (c &lt; loadedCount)
                {
                    held = c;
                    noitem = 0;
                }
                else
                {
                    noitem = 1;
                }
            }
        }
    }
}

//released
if (done == 1) &amp;&amp; (device_mouse_check_button_released(0,mb_left))
{
    //BACK
    if (device_mouse_x(0) &gt; room_width-48)
    &amp;&amp; (device_mouse_y(0) &lt; 56)
    &amp;&amp; (clicked == -1)
    {
        done = 2;
    }
    
    //prev button
    if (device_mouse_x(0) &lt;= 32)
    &amp;&amp; (device_mouse_y(0) &gt; 390)
    &amp;&amp; (page &gt; 0)
    &amp;&amp; (loading == 0)
    &amp;&amp; (clicked == 1)
    &amp;&amp; (error == 0)
    {
        page -= 1;
        global.page = page;
        loading = -1;
    }
    
    //next button
    if (device_mouse_x(0) &gt;= room_width-32)
    &amp;&amp; (device_mouse_y(0) &gt; 390)
    &amp;&amp; (page &lt; pages)
    &amp;&amp; (loading == 0)
    &amp;&amp; (clicked == 2)
    &amp;&amp; (error == 0)
    {
        page += 1;
        global.page = page;
        loading = -1;
    }
    
    //list item
    if (device_mouse_y(0) &gt;= 66)
    &amp;&amp; (device_mouse_y(0) &lt; 320+66)
    &amp;&amp; (loading == 0)
    &amp;&amp; (clicked == 3)
    &amp;&amp; (error == 0)
    &amp;&amp; (noitem == 0)
    {
        //global.read_internet_music = ;
        global.read_internet_title = resultName[held];
        global.read_internet_author = resultAuthor[held];
        global.read_internet_likes = resultLikes[held];
        global.read_internet_reallikes = real_likes[held];
        temp_online_file(resultMap[held]);

        room_goto(rm_player);
    }
    noitem = 0;
    clicked = 0;
    held = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///exit animation
if (x1 &lt; room_width) &amp;&amp; (done == 2)
{
    x1 += max((room_width-x1)*0.1,2);
}
if (alpha &gt; 0) &amp;&amp; (done == 2)
{
    alpha -= 0.05;
}

if (alpha &lt;= 0) &amp;&amp; (x1 &gt;= room_width) &amp;&amp; (done == 2)
{
    alpha = 0;
    x1 = room_width;
    done = 3;
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///cycle loading animation
loadstep += 1;
if (loadstep &gt; 7)
{
    loadstep = 0;
    switch (loaddot)
    {
        case(''): loaddot = '-'; break;
        case('-'): loaddot = '--'; break;
        case('--'): loaddot = '---'; break;
        case('---'): loaddot = ''; break;
        default: loaddot = ''; break;
    }
}
if (loading == 0)
{
    if (la &gt; 0)
    {
        la -= 0.1;
    }
    if (la &lt; 0)
    {
        la = 0;
    }
}
else
{
    if (la &lt; 1)
    {
        la += 0.1;
    }
    if (la &gt; 1)
    {
        la = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ready to reload
if (list_alpha &gt; 0) &amp;&amp; (loading == -1)
{
    list_alpha -= 0.1;
}
if (list_alpha &lt;= 0) &amp;&amp; (loading == -1)
{
    loading = 1;
    list_alpha = 0;
    loadedCount = 0;
    event_user(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///retrive data
// if the results for the level fetches are present and the status does not error
if (ds_map_find_value(async_load, "id") == fetchData &amp;&amp; ds_map_find_value(async_load, "status") == 0) {
    results = ds_map_find_value(async_load, "result"); // assign the results to results
    //clearMap(); // clear the map
    listedLevels = 0; // empty the number of levels listed

    // get the number of open and closed level brackets
    c1 = string_count(string(symbolOpen) + string(symbolSlash) + "level" + string(symbolClose), results);
    c2 = string_count(string(symbolOpen) + "level" + string(symbolClose), results);

    // ensure they match, otherwise not all the data has been retrieved
    if (c1 == c2) {
        listedLevels = c1;
    }

    // cycle through the levels
    for (var i = 0; i &lt; listedLevels; i++) {

        resultMap[i] = split(results, "map"); // grab the map data
        resultAuthor[i] = split(results, "author"); // grab the level author
        resultName[i] = split(results, "name"); // grab the level name
        resultDate[i] = split(results, "date"); // grab the level date
        resultLikes[i] = split(results, "likes"); // grab the level likes
        resultAuthor[i] = string_replace_all(resultAuthor[i],'+',' ');
        resultName[i] = string_replace_all(resultName[i],'+',' ');
        
        // remove data from results, continue
        results = string_delete(results, 1, string_pos(string(symbolOpen) + string(symbolSlash) + "level" + string(symbolClose), results));
        
        // increase number of levels by one
        loadedCount++;
        
        // decode the author and name
        real_likes[i] = real(resultLikes[i]);
        if (real_likes[i] &gt;= 1000) &amp;&amp; (real_likes[i] &lt; 1000000)
        {
            resultLikes[i] = string(round(real_likes[i]/1000))+'K';
        }
        else if (real_likes[i] &gt;= 1000000) &amp;&amp; (real_likes[i] &lt; 1000000000)
        {
            resultLikes[i] = string(round(real_likes[i]/1000000))+'M';
        }
        else if (real_likes[i] &gt;= 1000000000)
        {
            resultLikes[i] = string(round(real_likes[i]/1000000000))+'B';
        }
        resultAuthor[i] = url_decode(resultAuthor[i]);
        resultName[i] = url_decode(resultName[i]);
        //show_message('likes'+resultLikes[i]);
    }
    loading = 0; // results are ready to be listed
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///retrive page numbers
if (ds_map_find_value(async_load,"id") == getrows) &amp;&amp; (ds_map_find_value(async_load,"status") == 0)
{
    var numbah, rnumbah;
    numbah = ds_map_find_value(async_load, "result");
    rnumbah = (real(numbah))
    if (rnumbah &lt;= 1)
    {
        pages = 0;
    }
    else
    {
        pages = (rnumbah-1) div 10;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///REFRESH
if (os_is_network_connected())
{
    loading = 1;
    fetchData = http_get(BASEURL+'/pull.php?Type=1&amp;page='+string(global.page));
}
else
{
    error = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///back
room_goto(rm_title);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///render "MUSIC"
draw_set_color(global.text_white);
draw_set_font(ft_gb_xxl);
draw_set_alpha(alpha);
draw_text(8+x1,16,"MUSIC");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///render back button
//highlight
draw_set_color(global.accent_color[global.accent]);
if (clicked == -1)
{
    draw_circle(room_width-24,32,15,0);
}
//button
draw_sprite_ext(s_back,global.background,room_width-40+x1,16,1,1,0,$FFFFFF,alpha);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///render loading thingy
if (error == 0)
{
    draw_set_color(global.text_white);
    draw_set_font(ft_gb_s);
    draw_set_alpha(alpha*la);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text((room_width*0.5)+x1,room_height*0.5,loaddot+'Loading'+loaddot);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///render list of musics
if (loading == 0)
{
    if (list_alpha &lt; 1)
    {
        list_alpha += 0.1;
    }
    
}
else
{
    if (list_alpha &gt; 0)
    {
        list_alpha -= 0.1;
    }
}

if (loading &lt;&gt; 1)
{
    var z;
    for (z = 0; z &lt; loadedCount; z++) //36px height limit
    {
        if (z &lt;&gt; 0)
        {
            if (z mod 2 == 1)
            {
                draw_set_color(global.text_white);
                draw_set_alpha((list_alpha*alpha)*0.15);
                draw_rectangle(0,66+(z*32),room_width,66+((z+1)*32),0);
            }
        }
        if (held == z) &amp;&amp; (clicked == 3) &amp;&amp; (noitem == 0)
        {
            draw_set_color(global.accent_color[global.accent]);
            draw_set_alpha((list_alpha*alpha)*0.3);
            draw_rectangle(0,66+(z*32),room_width,66+((z+1)*32),0);
            draw_set_color(global.text_white);
        }
        //draw_text(0,0,held);
        draw_set_alpha(list_alpha*alpha);
        draw_set_font(ft_gb);
        draw_text(4+x1,68+(z*32),resultName[z]);
        draw_set_alpha((list_alpha*alpha)*0.6);
        draw_set_font(ft_gb_s);
        draw_text(6+x1,84+(z*32),'by: '+resultAuthor[z]);
        draw_set_halign(fa_right);
        draw_text((room_width-4)+x1,84+(z*32),resultLikes[z]+' Likes');
        draw_set_halign(fa_left);
        draw_set_alpha(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///render pages
if (error == 0) &amp;&amp; (pages &gt; 0)
{
    if (page &gt; 0)
    {
        if (clicked == 1)
        {
            draw_set_alpha(alpha*0.5);
            draw_set_color(global.accent_color[global.accent]);
            draw_circle(3+12,394+12,11,0);
            draw_set_color($FFFFFF);
            draw_set_alpha(1);
        }
        draw_sprite_ext(s_nav,global.background,4,394,1,1,0,$FFFFFF,alpha);
    }
    if (page &lt; pages)
    {
        if (clicked == 2)
        {
            draw_set_alpha(alpha*0.5);
            draw_set_color(global.accent_color[global.accent]);
            draw_circle((room_width-5)-12,394+12,11,0);
            draw_set_color($FFFFFF);
            draw_set_alpha(1);
        }
        draw_sprite_ext(s_nav,global.background,room_width-4,394,-1,1,0,$FFFFFF,alpha);
    }
    var _pagetxt, _cond, xx, yy;
    if (pages &gt; 0)
    {
        _pagetxt = '';
        _cond = 0;
        yy = 405;
        if (pages == 1)
        {
            _pagetxt = '1 2';
            if (page == 0) { xx = 109; } else { xx = 131; }
        }
        else if (pages == 2)
        {
            _pagetxt = '1 2 3';
            _cond = 1;
            if (page == 0) { xx = 99; } else if (page == 1) { xx = 121; } else { xx = 143; }
        }
        else
        {
            if (page &lt;= 1)
            {
                _pagetxt = '  1 2 3..';
                _cond = 2;
                if (page == 0) { xx = 99; } else if (page == 1) { xx = 121; } else { xx = 143; }
            }
            else if (page &gt;= pages-1)
            {
                _pagetxt = '..'+string(pages-1)+' '+string(pages)+' '+string(pages+1)+'  ';
                _cond = 3;
                if (page == pages-2) { xx = 99; } else if (page == pages-1) { xx = 121; } else { xx = 143; }
            }
            else
            {
                _pagetxt = '..'+string(page)+' '+string(page+1)+' '+string(page+2)+'..';
                _cond = 4;
                xx = 120;
            }
        }
        draw_set_alpha(alpha*0.5);
        draw_set_color(global.accent_color[global.accent]);
        draw_circle(xx,yy,12,0);
        draw_set_alpha(alpha);
        draw_set_halign(fa_center);
        draw_set_color(global.text_white);
        draw_set_font(ft_gb);
        draw_text(room_width*0.5,398,_pagetxt);
        draw_set_halign(fa_left);
    }
    draw_set_alpha(0.5*(alpha*la));
    var _Ff = global.background*255;
    draw_set_color(make_color_rgb(_Ff,_Ff,_Ff));
    draw_rectangle(0,392,room_width,room_height,0);
    
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///no internet error
if (error == 1)
{
    draw_set_color(global.text_white);
    draw_set_font(ft_gb_s);
    draw_set_alpha(alpha);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text((room_width*0.5)+x1,room_height*0.5,"Darn it!#There's no internet!");
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///back button exit this screen
if (clicked == 0)
{
    done = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
