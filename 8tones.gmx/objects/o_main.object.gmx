<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init
rows = 3; //limit of rows
row = 0; //current row

songname = ""; //song name

cursor = 0; //the cursor for pattern editor
cursor_active = 0; //current selection active or not
cursor_pitch = -1; //current selection pitch
cursor_vol = 1; //current selection volume

_start_h = 68; //GUI position where pattern editor starts

channel = 0; //current channel
max_chan = 4; //max channels


FILE = ds_map_create();
channel_a = ds_grid_create(2,(rows+1)*16); //square 50% channel (pos/p/v)
channel_b = ds_grid_create(2,(rows+1)*16); //square 25% channel (pos/p/v)
channel_c = ds_grid_create(2,(rows+1)*16); //square 12.5% channel (pos/p/v)
channel_d = ds_grid_create(2,(rows+1)*16); //triangle channel (pos/p/v)
channel_e = ds_grid_create(2,(rows+1)*16); //Noise (beats) channel (pos/typ/volume)
//channel_f = ds_grid_create(2,rows*16); //DPCM channel (pos/typ/volume)

//init grids
var _i;
for (_i = 0; _i &lt; (rows+1)*16; _i += 1)
{
    ds_grid_add(channel_a,0,_i,-1); //sq50% - pitch
    ds_grid_add(channel_a,1,_i,1); //sq50% - volume
    
    ds_grid_add(channel_b,0,_i,-1); //sq25% - pitch
    ds_grid_add(channel_b,1,_i,1); //sq25% - volume
    
    ds_grid_add(channel_c,0,_i,-1); //sq12.5% - pitch
    ds_grid_add(channel_c,1,_i,1); //sq12.5% - volume
    
    ds_grid_add(channel_d,0,_i,-1); //tri% - pitch
    ds_grid_add(channel_d,1,_i,1); //tri% - volume
    
    ds_grid_add(channel_e,0,_i,-1); //tri% - pitch
    ds_grid_add(channel_e,1,_i,1); //tri% - volume
}

move_cursor = 0; //Cursor click on pattern editor bug fix
_digits_rw = string_length(string(row)); //rows &lt;&gt; button fix
ch_click = 0; //Cursor click on nav buttons fix
tempo = 150; //playback speed
name_changed = 0; //general setting dialog box bug fix

position = 0; //playback position

max_beats = 10; //(numbers of beat samples)-1

preview_clk = 0; //preview button click

saved = 1;

fade_out = 0;
fader = 1;
ACTION = 0;

copy_a = 0;
copy_b = 0;
copied = 0;
COPY = ds_grid_create(2,16);
COPIED = 0;

piano_sel = 0;
piano = 0;
piano_fade = 0;
piano_fade2 = 0;
piano_vol = 0;
piano_note_change = 0;
piano_preview = 0;

ios_bg = 0;

COPIED = 0;
clipboard[0,0] = -1; //pit
chipboard[0,1] = -1; //vol
COPIED2 = 0;
clipboard[1,0] = -1; //bt
chipboard[1,1] = -1; //vol

salt = "saturnmfgg";
get = http_get('');

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG PURPOSE!!!!
/*
ds_grid_set(channel_a,0,4,48); //sq50% - pitch
ds_grid_set(channel_a,1,4,0.4); //sq50% - volume

ds_grid_set(channel_a,0,23,54); //sq50% - pitch
ds_grid_set(channel_a,1,23,0.5); //sq50% - volume

ds_grid_set(channel_b,0,2,64); //sq25% - pitch
ds_grid_set(channel_b,1,2,0); //sq25% - volume

ds_grid_set(channel_b,0,8,43); //sq25% - pitch
ds_grid_set(channel_b,1,8,0.5); //sq25% - volume*/

//--bubble man--

//-row 1-
/*
ds_grid_set(channel_d,0,0,27); //tri - pitch
ds_grid_set(channel_d,1,0,1); //tri - volume

ds_grid_set(channel_d,0,2,43); //tri - pitch
ds_grid_set(channel_d,1,2,1); //tri - volume

ds_grid_set(channel_d,0,4,39); //tri - pitch
ds_grid_set(channel_d,1,4,1); //tri - volume

ds_grid_set(channel_d,0,6,26); //tri - pitch
ds_grid_set(channel_d,1,6,1); //tri - volume

ds_grid_set(channel_d,0,8,43); //tri - pitch
ds_grid_set(channel_d,1,8,1); //tri - volume

ds_grid_set(channel_d,0,10,36); //tri - pitch
ds_grid_set(channel_d,1,10,1); //tri - volume

ds_grid_set(channel_d,0,12,39); //tri - pitch
ds_grid_set(channel_d,1,12,1); //tri - volume

ds_grid_set(channel_d,0,14,32); //tri - pitch
ds_grid_set(channel_d,1,14,1); //tri - volume*/

//----------------------------------//

//-row 2-


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///playback variables
PLAYING = 0;
LOOP = 0;
pbbc = 0; //playback button click
pb_rate = 0; //playback rate
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dialog variables
_dialog_name = 0;
_ask_save = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WP8 menu variables
menu_pos = 0;
menu_text_pos = 0;
menu_entries = 11;
wp8_menu_clicked = 0;
m_entry[0] = "Change Name";
m_entry[1] = "Save";
m_entry[2] = "Save as text file";
m_entry[3] = "Save to clipboard";
m_entry[4] = "Publish your song";
m_entry[5] = "Add row";
m_entry[6] = "Remove the last row";
m_entry[7] = "Copy row";
m_entry[8] = "Paste row";
m_entry[9] = "Settings";
m_entry[10] = "Exit";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init file
if (global.load_file != "")
{
    songname = global.load_file;
    if (os_type == os_android) || (os_type == os_ios)
    {
        file_load_android(songname);
    }
    else
    {
        file_load(songname);
    }
}
else
{
    songname = "UNTITLED"; //song name
}

if (tempo &gt; 11)
{
    tempo = 7;
}

if (os_type == os_winphone)
{
    ads_enable(0,-999,0);
    ads_enable(0,-999,1);
    ads_enable(0,-999,2);
    ads_enable(0,-999,3);
    ads_enable(0,-999,4);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init export arrays
////var rowz, actual_cl;
//actual_cl = (rows+4) div 4;
//
//for (rowz = 0; rowz &lt; actual_cl; rowz ++)
//{
//    _add[rowz] = '';
//}
if (os_type == os_windows)
{
    global.online = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///publish song to online
//init grids
var _i, _blank;
_blank = 1;
for (_i = 0; _i &lt; (rows+1)*16; _i += 1)
{
    if (ds_grid_get(channel_a,0,_i) &lt;&gt; -1)
    {
        _blank = 0;
    }
    if (ds_grid_get(channel_b,0,_i) &lt;&gt; -1)
    {
        _blank = 0;
    }
    if (ds_grid_get(channel_c,0,_i) &lt;&gt; -1)
    {
        _blank = 0;
    }
    
    if (ds_grid_get(channel_d,0,_i) &lt;&gt; -1)
    {
        _blank = 0;
    }
    if (ds_grid_get(channel_e,0,_i) &lt;&gt; -1)
    {
        _blank = 0;
    }
}
if (global.online == 0)
{
    show_message("You don't have the capabilities to publish songs! Please purchase the"+'"Publisher" module at the main menu!');
    PLAYING = -3;
}
else if (songname == "UNTITLED")
{
    show_message('Please change your song name!');
    PLAYING = -3;
}
else if (_blank == 1)
{
    show_message('Sorry but you cannot submit a blank song!');
    PLAYING = -3;
}
else if (rows &gt; 127)
{
    show_message('Due to server limitations, you can only sumbit music up to 128 rows (including row 0). Sorry for the inconvenience!');
    PLAYING = -3;
}
else
{
    var _map, _pass;
    _pass = global.username+songname;
    _map = project_to_string();
    var _data = _map; // reformat data
    var post_data = _data; // encode the level data
    var post_author = url_encode(global.username); // encode the level author
    var post_level = url_encode(songname); // encode the level name
    var post_auth = url_encode(md5_string_utf8(_data + salt)); // authenticate the level using its data and salt in MD5 hashing
    var post_id = md5_string_utf8(url_encode(global.username)+url_encode(songname)+url_encode(salt)); // level ID, created using author name, level, salt in MD5 hasing
    var post_password = md5_string_utf8(_pass+salt); // password is password + salt hashed MD5
    var format = "map="+string(post_data)+"&amp;name="+string(post_level)+"&amp;author="+string(post_author)+"&amp;verify="+string(md5_string_utf8(string(post_data)+string(salt)))+"&amp;id="+string(post_id)+"&amp;password="+string(post_password)+"&amp;verify="+string(post_auth);
    get = http_post_string('http://8tones.cu.cc/post.php',format);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stop the preview
if (PLAYING &gt; 0)
{
    PLAYING = 0;
}
if (channel &lt;&gt; 4)
{
    audio_stop_all();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///allow to change song name again to prevent loop bug
name_changed = 0;
wp8_menu_clicked = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///playback movement
if (PLAYING == 1)
{
    pb_rate += 1;
    if (pb_rate &gt; abs(tempo-11))//(abs(tempo-280)*0.0333)) //this controls playback rate
    {
        pb_rate = 0;
        position += 1;
        cursor += 1;
        //if loop is enabled, jump to start
        if (position &gt; (rows*16)+15) &amp;&amp; (LOOP == 1)
        {
            position = 0;
            row = 0;
            cursor = 0;
        }
        event_user(0); //to play the audio
    }
    //continue to the next row
    if (cursor &gt; 15) &amp;&amp; (row &lt; rows)
    {
        cursor = 0;
        row += 1;
        _digits_rw = string_length(string(row)); //rows &lt;&gt; button fix
    }
    //stop at the end if loop is disabled
    if (position &gt;= (rows*16)+15) &amp;&amp; (LOOP == 0)
    {
        cursor = 15;
        PLAYING = 0;
        audio_stop_all();
        position = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>visible</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///get current cursor position
//get current channel
var __CHANNEL;
switch (channel)
{
    case(0): __CHANNEL = channel_a; break;
    case(1): __CHANNEL = channel_b; break;
    case(2): __CHANNEL = channel_c; break;
    case(3): __CHANNEL = channel_d; break;
    case(4): __CHANNEL = channel_e; break;
    default: __CHANNEL = channel_a; break;
}


var _ppos;
_ppos = (row*16)+cursor;
cursor_pitch = ds_grid_get(__CHANNEL,0,_ppos); //get current selection pitch
cursor_vol = ds_grid_get(__CHANNEL,1,_ppos); //get current selection volume
if (cursor_pitch == -1)
{
    cursor_active = 0; //inactive
}
else if (cursor_vol == 0)
{
    cursor_active = 2; //stopper
}
else
{
    cursor_active = 1; //active
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>piano</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Make sure it's not playing when editing</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>PLAYING</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///click thingy
if (device_mouse_check_button(0,mb_left)) &amp;&amp; (move_cursor == 0) &amp;&amp; (ch_click == 0) &amp;&amp; (pbbc == 0) &amp;&amp; (preview_clk == 0)
{
    //cursor selection of pattern editor
    if (device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h)
    &amp;&amp; (device_mouse_x(0) &lt; 136)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+256)
    {
        move_cursor = 1;
    }
    //channel switch (old)
    /*if (device_mouse_x(0) &gt; 116)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+260)
    &amp;&amp; (device_mouse_x(0) &lt; 136)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+276)
    {
        ch_click = 1;
    }
    if (device_mouse_x(0) &gt; 136)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+260)
    &amp;&amp; (device_mouse_x(0) &lt; 156)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+276)
    {
        ch_click = 2;
    }*/
    //row switch
    if (device_mouse_x(0) &gt; 88+((_digits_rw-1)*12))
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+276)
    &amp;&amp; (device_mouse_x(0) &lt; 108+((_digits_rw-1)*12))
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+296)
    &amp;&amp; (rows &gt; 0)
    {
        ch_click = 3;
    }
    if (device_mouse_x(0) &gt; 108+((_digits_rw-1)*12))
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+276)
    &amp;&amp; (device_mouse_x(0) &lt; 128+((_digits_rw-1)*12))
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+296)
    &amp;&amp; (rows &gt; 0)
    {
        ch_click = 4;
    }
    
    //tempo
    if (device_mouse_x(0) &gt; 132)
    &amp;&amp; (device_mouse_y(0) &gt; 12)
    &amp;&amp; (device_mouse_x(0) &lt; 160)
    &amp;&amp; (device_mouse_y(0) &lt; 44)
    {
        ch_click = 5;
    }
    if (device_mouse_x(0) &gt; 160)
    &amp;&amp; (device_mouse_y(0) &gt; 16)
    &amp;&amp; (device_mouse_x(0) &lt; 188)
    &amp;&amp; (device_mouse_y(0) &lt; 44)
    {
        ch_click = 6;
    }
    
    //preview current note
    if (device_mouse_x(0) &gt;= 144)
    &amp;&amp; (device_mouse_y(0) &gt;= _start_h+154)
    &amp;&amp; (device_mouse_x(0) &lt;= 236)
    &amp;&amp; (device_mouse_y(0) &lt;= _start_h+182)
    &amp;&amp; (cursor_active == 1)
    &amp;&amp; (piano_sel == 0)
    {
        preview_clk = 1;
    }
    
}
if (move_cursor == 1)
{
    if (device_mouse_y(0) &gt; _start_h)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+256)
    {
        cursor = (device_mouse_y(0)-_start_h) div 16;
    }
}
if !(device_mouse_check_button(0,mb_left)) &amp;&amp; (ch_click == 0) &amp;&amp; (pbbc == 0) &amp;&amp; (preview_clk == 0) &amp;&amp; (move_cursor &lt;&gt; 0) 
{
    move_cursor = 0;
    if (position == 0) &amp;&amp; (cursor &gt;= 15) &amp;&amp; (row == rows) &amp;&amp; (LOOP == 0)
    {
        //dont change playback position if there's no loop enabled;
    }
    else
    {
        position = cursor+(row*16);
    }
    if (cursor &gt;= 15) &amp;&amp; (row == rows) &amp;&amp; (LOOP == 0)
    {
        position = 0;
    }
}


//release click

if !(device_mouse_check_button(0,mb_left)) &amp;&amp; (ch_click &lt;&gt; 0)
{
    //click to change channel
    if (device_mouse_x(0) &gt; 116)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+260)
    &amp;&amp; (device_mouse_x(0) &lt; 136)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+276)
    &amp;&amp; (ch_click == 1)
    {
        if (channel &lt;= 0)
        {
            channel = max_chan;
        }
        else
        {
            channel -= 1;
        }
    }
    if (device_mouse_x(0) &gt; 136)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+260)
    &amp;&amp; (device_mouse_x(0) &lt; 156)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+276)
    &amp;&amp; (ch_click == 2)
    {
        if (channel &gt;= max_chan)
        {
            channel = 0;
        }
        else
        {
            channel += 1;
        }
    }
    
    //click to change row
    if (device_mouse_x(0) &gt; 88+((_digits_rw-1)*12))
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+276)
    &amp;&amp; (device_mouse_x(0) &lt; 108+((_digits_rw-1)*12))
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+296)
    &amp;&amp; (ch_click == 3)
    {
        if (row &lt;= 0)
        {
            row = rows;
        }
        else
        {
            row -= 1;
        }
        position = cursor+(row*16);
        _digits_rw = string_length(string(row)); //rows &lt;&gt; button fix
    }
    if (device_mouse_x(0) &gt; 108+((_digits_rw-1)*12))
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+276)
    &amp;&amp; (device_mouse_x(0) &lt; 128+((_digits_rw-1)*12))
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+296)
    &amp;&amp; (ch_click == 4)
    {
        if (row &gt;= rows)
        {
            row = 0;
        }
        else
        {
            row += 1;
        }
        position = cursor+(row*16);
        _digits_rw = string_length(string(row)); //rows &lt;&gt; button fix
    }
    
    //click to change tempo
    if (device_mouse_x(0) &gt; 132)
    &amp;&amp; (device_mouse_y(0) &gt; 12)
    &amp;&amp; (device_mouse_x(0) &lt; 160)
    &amp;&amp; (device_mouse_y(0) &lt; 44)
    &amp;&amp; (ch_click == 5)
    &amp;&amp; (tempo &gt; 0)
    {
        tempo -= 1;
        saved = 0;
        if (tempo &lt;= 0)
        {
            tempo = 0;
        }
    }
    
    if (device_mouse_x(0) &gt; 160)
    &amp;&amp; (device_mouse_y(0) &gt; 16)
    &amp;&amp; (device_mouse_x(0) &lt; 188)
    &amp;&amp; (device_mouse_y(0) &lt; 44)
    &amp;&amp; (ch_click == 6)
    &amp;&amp; (tempo &lt; 11)
    {
        tempo += 1;
        saved = 0;
        if (tempo &gt;= 11)
        {
            tempo = 11;
        }
    }
    
    ch_click = 0;
}

//preview current note
if !(device_mouse_check_button(0,mb_left)) &amp;&amp; (preview_clk &lt;&gt; 0)
{
    if (device_mouse_x(0) &gt;= 144)
    &amp;&amp; (device_mouse_y(0) &gt;= _start_h+154)
    &amp;&amp; (device_mouse_x(0) &lt;= 236)
    &amp;&amp; (device_mouse_y(0) &lt;= _start_h+182)
    &amp;&amp; (preview_clk == 1)
    &amp;&amp; (cursor_active == 1)
    &amp;&amp; (piano_sel == 0)
    {
        //PLAYING = 2;
        event_user(2); //preview/play the sample
    }
    preview_clk = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///edit tones
//get current channel
var __CHANNEL;
switch (channel)
{
    case(0): __CHANNEL = channel_a; break;
    case(1): __CHANNEL = channel_b; break;
    case(2): __CHANNEL = channel_c; break;
    case(3): __CHANNEL = channel_d; break;
    case(4): __CHANNEL = channel_e; break;
    default: __CHANNEL = channel_a; break;
}
var _ppos;
_ppos = (row*16)+cursor;

//when active
if (device_mouse_check_button_pressed(0,mb_left)) &amp;&amp; (cursor_active == 1) &amp;&amp; (piano_sel == 0)
{
    //PIANO ROLL
    if (device_mouse_x(0) &gt;= 212)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+40)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+68)
    {
        piano_sel = 1;
    }
    //change octave
    //OCT UP
    if (device_mouse_x(0) &gt; 144)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+24)
    &amp;&amp; (device_mouse_x(0) &lt; 178)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+56)
    {
        if (cursor_pitch &lt; 71) &amp;&amp; (channel &lt;&gt; 4) &amp;&amp; (global.reverse_PS == 1)
        {
            var _n;
            _n = cursor_pitch+12;
            ds_grid_set(__CHANNEL,0,_ppos,_n);
            saved = 0;
            if (global.preview &lt;&gt; 0)
            {
                position = _ppos;
                event_user(2);
            }
        }
        if (cursor_pitch &lt; 83) &amp;&amp; (channel &lt;&gt; 4) &amp;&amp; (global.reverse_PS == 0)
        {
            var _n;
            _n = cursor_pitch+1;
            ds_grid_set(__CHANNEL,0,_ppos,_n);
            saved = 0;
            if (global.preview &lt;&gt; 0)
            {
                position = _ppos;
                event_user(2);
            }
        }
        if (cursor_pitch &lt; max_beats) &amp;&amp; (channel == 4)
        {
            var _n;
            _n = cursor_pitch+1;
            ds_grid_set(__CHANNEL,0,_ppos,_n);
            saved = 0;
            if (global.preview &lt;&gt; 0)
            {
                position = _ppos;
                event_user(2);
            }
        }
    }
    //OCT DOWN
    if (device_mouse_x(0) &gt; 144)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+56)
    &amp;&amp; (device_mouse_x(0) &lt; 178)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+82)
    {
        if (cursor_pitch &gt;= 12) &amp;&amp; (channel &lt;&gt; 4) &amp;&amp; (global.reverse_PS == 1)
        {
            var _n;
            _n = cursor_pitch-12;
            ds_grid_set(__CHANNEL,0,_ppos,_n);
            saved = 0;
            if (global.preview &lt;&gt; 0)
            {
                position = _ppos;
                event_user(2);
            }
        }
        if (cursor_pitch &gt;= 1) &amp;&amp; (channel &lt;&gt; 4) &amp;&amp; (global.reverse_PS == 0)
        {
            var _n;
            _n = cursor_pitch-1;
            ds_grid_set(__CHANNEL,0,_ppos,_n);
            saved = 0;
            if (global.preview &lt;&gt; 0)
            {
                position = _ppos;
                event_user(2);
            }
        }
        if (cursor_pitch &gt;= 1) &amp;&amp; (channel == 4)
        {
            var _n;
            _n = cursor_pitch-1;
            ds_grid_set(__CHANNEL,0,_ppos,_n);
            saved = 0;
            if (global.preview &lt;&gt; 0)
            {
                position = _ppos;
                event_user(2);
            }
        }
    }
    //change pitch
    if (device_mouse_x(0) &gt; 178)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+24)
    &amp;&amp; (device_mouse_x(0) &lt; 212)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+56)
    {
        //PIT UP
        if (cursor_pitch &lt; 83) &amp;&amp; (channel &lt;&gt; 4) &amp;&amp; (global.reverse_PS == 1)
        {
            var _n;
            _n = cursor_pitch+1;
            ds_grid_set(__CHANNEL,0,_ppos,_n);
            saved = 0;
            if (global.preview &lt;&gt; 0)
            {
                position = _ppos;
                event_user(2);
            }
        }
        if (cursor_pitch &lt; 71) &amp;&amp; (channel &lt;&gt; 4) &amp;&amp; (global.reverse_PS == 0)
        {
            var _n;
            _n = cursor_pitch+12;
            ds_grid_set(__CHANNEL,0,_ppos,_n);
            saved = 0;
            if (global.preview &lt;&gt; 0)
            {
                position = _ppos;
                event_user(2);
            }
        }
    }
    //PIT DOWN
    if (device_mouse_x(0) &gt; 178)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+56)
    &amp;&amp; (device_mouse_x(0) &lt; 212)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+82)
    {
        if (cursor_pitch &gt;= 1) &amp;&amp; (channel &lt;&gt; 4) &amp;&amp; (global.reverse_PS == 1)
        {
            var _n;
            _n = cursor_pitch-1;
            ds_grid_set(__CHANNEL,0,_ppos,_n);
            saved = 0;
            if (global.preview &lt;&gt; 0)
            {
                position = _ppos;
                event_user(2);
            }
        }
        if (cursor_pitch &gt;= 12) &amp;&amp; (channel &lt;&gt; 4) &amp;&amp; (global.reverse_PS == 0)
        {
            var _n;
            _n = cursor_pitch-12;
            ds_grid_set(__CHANNEL,0,_ppos,_n);
            saved = 0;
            if (global.preview &lt;&gt; 0)
            {
                position = _ppos;
                event_user(2);
            }
        }
    }
    
    
    //change volume
    if (device_mouse_x(0) &gt; 160)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+80)
    &amp;&amp; (device_mouse_x(0) &lt; 192)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+116)
    {
        if (cursor_vol &lt; 1)
        {
            var _v;
            _v = cursor_vol+0.1;
            ds_grid_set(__CHANNEL,1,_ppos,_v);
            saved = 0;
            if (global.preview &lt;&gt; 0)
            {
                position = _ppos;
                event_user(2);
            }
        }
    }
    if (device_mouse_x(0) &gt; 160)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+128)
    &amp;&amp; (device_mouse_x(0) &lt; 192)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+148)
    {
        if (cursor_vol &gt; 0.1)
        {
            var _v;
            _v = cursor_vol-0.1;
            ds_grid_set(__CHANNEL,1,_ppos,_v);
            saved = 0;
            if (global.preview &lt;&gt; 0)
            {
                position = _ppos;
                event_user(2);
            }
        }
    }
    
    //delete note
    if (device_mouse_x(0) &gt; 162)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+184)
    &amp;&amp; (device_mouse_x(0) &lt; 186)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+208)
    {
        ds_grid_set(__CHANNEL,0,_ppos,-1);
        sound_stop_all();
        saved = 0;
    }
    
    //mute note
    if (device_mouse_x(0) &gt; 196)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+184)
    &amp;&amp; (device_mouse_x(0) &lt; 220)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+208)
    {
        ds_grid_set(__CHANNEL,1,_ppos,0);
        sound_stop_all();
        saved = 0;
    }
    
    //cut/copy note
    if (device_mouse_x(0) &gt; 141)
    &amp;&amp; (device_mouse_y(0) &gt;= _start_h+208)
    &amp;&amp; (device_mouse_x(0) &lt; 201)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+240)
    {
        if (channel &lt;&gt; 4)
        {
            COPIED = 1;
            clipboard[0,0] = cursor_pitch;
            clipboard[0,1] = cursor_vol;
        }
        else
        {
            COPIED2 = 1;
            clipboard[1,0] = cursor_pitch;
            clipboard[1,1] = cursor_vol;
        }
        //CUT ONLY
        if (device_mouse_x(0) &lt; 171)
        {
            saved = 0;
            ds_grid_set(__CHANNEL,0,_ppos,-1);
        }
        sound_stop_all();
    }
    
    //paste note
    if (device_mouse_x(0) &gt;= 201)
    &amp;&amp; (device_mouse_y(0) &gt;= _start_h+208)
    &amp;&amp; (device_mouse_x(0) &lt; 232)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+240)
    {
        if (channel &lt;&gt; 4)
        {
            if (COPIED == 1) &amp;&amp; (clipboard[0,0] &lt;&gt; -1) &amp;&amp; (clipboard[0,1] &lt;&gt; -1)
            {
                ds_grid_set(__CHANNEL,0,_ppos,clipboard[0,0]);
                ds_grid_set(__CHANNEL,1,_ppos,clipboard[0,1]);
                saved = 0;
            }
        }
        else
        {
            if (COPIED2 == 1) &amp;&amp; (clipboard[1,0] &lt;&gt; -1) &amp;&amp; (clipboard[1,1] &lt;&gt; -1)
            {
                ds_grid_set(__CHANNEL,0,_ppos,clipboard[1,0]);
                ds_grid_set(__CHANNEL,1,_ppos,clipboard[1,1]);
                saved = 0;
            }
        }
    }
}

//when muted
else if (device_mouse_check_button_pressed(0,mb_left)) &amp;&amp; (cursor_active == 2)
{
    //unmute (HAS SET TO 100% AS FOR RIGHT NOW)
    if ((device_mouse_x(0) &gt; 144)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+8)
    &amp;&amp; (device_mouse_x(0) &lt; 236)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+48))
    || ((device_mouse_x(0) &gt; 196)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+48)
    &amp;&amp; (device_mouse_x(0) &lt; 220)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+72))
    {
        ds_grid_set(__CHANNEL,1,_ppos,1);
        saved = 0;
        if (global.preview &lt;&gt; 0)
        {
            position = _ppos;
            event_user(2);
        }
    }
    
    //delete mute note
    if (device_mouse_x(0) &gt; 162)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+48)
    &amp;&amp; (device_mouse_x(0) &lt; 186)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+72)
    {
        ds_grid_set(__CHANNEL,0,_ppos,-1);
        sound_stop_all();
        saved = 0;
    }
    
    //paste note
    if (device_mouse_x(0) &gt;= 171)
    &amp;&amp; (device_mouse_y(0) &gt;= _start_h+72)
    &amp;&amp; (device_mouse_x(0) &lt;= 201)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+96)
    {
        if (channel &lt;&gt; 4)
        {
            if (COPIED == 1) &amp;&amp; (clipboard[0,0] &lt;&gt; -1) &amp;&amp; (clipboard[0,1] &lt;&gt; -1)
            {
                ds_grid_set(__CHANNEL,0,_ppos,clipboard[0,0]);
                ds_grid_set(__CHANNEL,1,_ppos,clipboard[0,1]);
                saved = 0;
            }
        }
        else
        {
            if (COPIED2 == 1) &amp;&amp; (clipboard[1,0] &lt;&gt; -1) &amp;&amp; (clipboard[1,1] &lt;&gt; -1)
            {
                ds_grid_set(__CHANNEL,0,_ppos,clipboard[1,0]);
                ds_grid_set(__CHANNEL,1,_ppos,clipboard[1,1]);
                saved = 0;
            }
        }
    }
}

//when inactive
else if (device_mouse_check_button_pressed(0,mb_left)) &amp;&amp; (cursor_active == 0)
{
    //Add note (HAS TO BE 4C, VOLUME SET FOR 100%)
    if ((device_mouse_x(0) &gt; 144)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+8)
    &amp;&amp; (device_mouse_x(0) &lt; 236)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+48))
    || ((device_mouse_x(0) &gt; 162)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+48)
    &amp;&amp; (device_mouse_x(0) &lt; 186)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+72))
    {
        if (channel &lt;&gt; 4)
        {
            ds_grid_set(__CHANNEL,0,_ppos,36);
            if (global.preview &lt;&gt; 0)
            {
                position = _ppos;
                event_user(2);
            }
        }
        else
        {
            ds_grid_set(__CHANNEL,0,_ppos,0);
            if (global.preview &lt;&gt; 0)
            {
                position = _ppos;
                event_user(2);
            }
        }
        ds_grid_set(__CHANNEL,1,_ppos,1);
        saved = 0;
    }
    
    //add mute note
    if (device_mouse_x(0) &gt; 196)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+48)
    &amp;&amp; (device_mouse_x(0) &lt; 220)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+72)
    {
        ds_grid_set(__CHANNEL,0,_ppos,36);
        ds_grid_set(__CHANNEL,1,_ppos,0);
        sound_stop_all();
        saved = 0;
    }
    //paste note
    if (device_mouse_x(0) &gt;= 171)
    &amp;&amp; (device_mouse_y(0) &gt;= _start_h+72)
    &amp;&amp; (device_mouse_x(0) &lt;= 201)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+96)
    {
        if (channel &lt;&gt; 4)
        {
            if (COPIED == 1) &amp;&amp; (clipboard[0,0] &lt;&gt; -1) &amp;&amp; (clipboard[0,1] &lt;&gt; -1)
            {
                ds_grid_set(__CHANNEL,0,_ppos,clipboard[0,0]);
                ds_grid_set(__CHANNEL,1,_ppos,clipboard[0,1]);
                saved = 0;
            }
        }
        else
        {
            if (COPIED2 == 1) &amp;&amp; (clipboard[1,0] &lt;&gt; -1) &amp;&amp; (clipboard[1,1] &lt;&gt; -1)
            {
                ds_grid_set(__CHANNEL,0,_ppos,clipboard[1,0]);
                ds_grid_set(__CHANNEL,1,_ppos,clipboard[1,1]);
                saved = 0;
            }
        }
    }
}


///OPEN PIANO ROLL
if (device_mouse_check_button_released(0,mb_left)) &amp;&amp; (piano_sel == 1)// &amp;&amp; (channel &lt;&gt; 4)
{
    if (device_mouse_x(0) &gt;= 212)
    &amp;&amp; (device_mouse_y(0) &gt; _start_h+40)
    &amp;&amp; (device_mouse_y(0) &lt; _start_h+68)
    {
        piano_sel = 0;
        piano = 1;
    }
    else
    {
        piano_sel = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change general settings (OBSELETE)
/*
if (device_mouse_check_button_pressed(0,mb_left))
{
    //change song name
    /*
    if (device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; 0)
    &amp;&amp; (device_mouse_x(0) &lt; room_width)
    &amp;&amp; (device_mouse_y(0) &lt; 26)
    &amp;&amp; (name_changed == 0)
    {
        name_changed = 1;
        //PLAYING = -1;
        _dialog_name = get_string_async("What's the title for your song?",songname);
        /*var _NAME; //legacy dialog
        _NAME = ""
        _NAME = get_string("What's the title for your song?",songname);
        if (_NAME != "")
        {
            songname = _NAME;
        }
        alarm[0] = 8;
    }
    
    //change tempo
    if (device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; 26)
    &amp;&amp; (device_mouse_x(0) &lt; 144)
    &amp;&amp; (device_mouse_y(0) &lt; 52)
    &amp;&amp; (name_changed == 0)
    {
        name_changed = 1;
        //PLAYING = -1;
        _dialog_tempo = get_integer_async("Choose your tempo! (50-250)",tempo);
        /*LEGACY CODES
        var _TEMPO;
        _TEMPO = ""
        _TEMPO = round(get_integer("Choose your tempo! (50-250)",tempo));
        if (_TEMPO &gt;= 50) &amp;&amp; (_TEMPO &lt;= 250)
        {
            tempo = _TEMPO;
        }
        alarm[0] = 8;
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>---END EDITOR---</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Playback controls
if (device_mouse_check_button(0,mb_left)) &amp;&amp; (move_cursor == 0) &amp;&amp; (ch_click == 0) &amp;&amp; (pbbc == 0) &amp;&amp; (preview_clk == 0) &amp;&amp; (PLAYING &gt;= 0)
{
    //play/pause
    if (device_mouse_x(0) &gt; 4)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-60)
    &amp;&amp; (device_mouse_x(0) &lt; 44)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-16)
    {
        pbbc = 1;
    }
    //stop
    if (device_mouse_x(0) &gt; 44)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-60)
    &amp;&amp; (device_mouse_x(0) &lt; 84)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-16)
    {
        pbbc = 2;
    }
    //toggle loop
    if (device_mouse_x(0) &gt; 84)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-60)
    &amp;&amp; (device_mouse_x(0) &lt; 124)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-16)
    {
        pbbc = 3;
    }
    //top
    if (device_mouse_x(0) &gt; 124)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-60)
    &amp;&amp; (device_mouse_x(0) &lt; 164)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-16)
    {
        pbbc = 4;
    }
}

if !(device_mouse_check_button(0,mb_left)) &amp;&amp; (pbbc &lt;&gt; 0) &amp;&amp; (PLAYING &gt;= 0)
{
    //click to hit play button
    if (device_mouse_x(0) &gt; 4)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-60)
    &amp;&amp; (device_mouse_x(0) &lt; 44)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-16)
    &amp;&amp; (pbbc == 1)
    {
        if (PLAYING == 0)
        {
            sound_stop_all();
            PLAYING = 1;
            pb_rate = 0;
            if (position == 0)
            {
                cursor = 0;
                row = 0;
            }
            else
            {
                position = (row*16)+cursor;
            }
            event_user(0);
        }
        else if (PLAYING == 1)
        {
            PLAYING = 0;
            audio_stop_all();
        }
    }
    //stop button
    if (device_mouse_x(0) &gt; 44)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-60)
    &amp;&amp; (device_mouse_x(0) &lt; 84)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-16)
    &amp;&amp; (pbbc == 2)
    {
        if (PLAYING == 1)
        {
            cursor = 0;
            row = 0;
            PLAYING = 0;
            position = 0;
        }
        audio_stop_all();
    }
    //toggle loop button
    if (device_mouse_x(0) &gt; 84)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-60)
    &amp;&amp; (device_mouse_x(0) &lt; 124)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-16)
    &amp;&amp; (pbbc == 3)
    {
        if (LOOP == 1)
        {
            LOOP = 0;
        }
        else
        {
            LOOP = 1;
        }
    }
    //jump to top of this row button
    if (device_mouse_x(0) &gt; 124)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-60)
    &amp;&amp; (device_mouse_x(0) &lt; 164)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-16)
    &amp;&amp; (pbbc == 4)
    {
        cursor = 0;
        position = row*16;
        if (PLAYING == 1)
        {
            event_user(0);
        }
    }
    pbbc = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WP8 styled menu
if (device_mouse_check_button_pressed(0,mb_left))
{
    if (device_mouse_x(0) &gt; room_width-48)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-32)
    &amp;&amp; (device_mouse_x(0) &lt; room_width)
    &amp;&amp; (device_mouse_y(0) &lt; room_height)
    {
        PLAYING = -1;
        if (PLAYING &lt;&gt; 0)
        {
            audio_stop_all();
        }
    }
}
if (keyboard_check_pressed(vk_backspace)) &amp;&amp; (PLAYING == 0)
{
    PLAYING = -1;
    if (PLAYING &lt;&gt; 0)
    {
        audio_stop_all();
    }
}

//roll up the menu
if (PLAYING == -1)
{
    var _max, _max2;
    _max = menu_entries*32;
    _max2 = _max+8;
    
    if (menu_pos &lt; _max2)
    {
        menu_pos += max((_max2-menu_pos)*0.25,2);
    }
    else
    {
        menu_pos = _max2;
    }
    
    if (menu_text_pos &lt; _max)
    {
        menu_text_pos += max((_max-menu_text_pos)*0.125,2);
    }
    else
    {
        menu_text_pos = _max;
        PLAYING = -2;
    }
}

//menu clicks
if (PLAYING == -2) &amp;&amp; !(instance_exists(o_question))
{
    if (((device_mouse_x(0) &gt; room_width-48)
    &amp;&amp; (device_mouse_y(0) &gt; room_height-32-menu_pos)
    &amp;&amp; (device_mouse_x(0) &lt; room_width)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-menu_pos))
    || ((device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; 0)
    &amp;&amp; (device_mouse_x(0) &lt; room_width)
    &amp;&amp; (device_mouse_y(0) &lt; room_height-32-menu_pos)))
    &amp;&amp; (device_mouse_check_button_pressed(0,mb_left))
    {
        PLAYING = -3;
    }
    if (keyboard_check_pressed(vk_backspace))
    {
        PLAYING = -3;
    }
    event_user(1);
}

//roll down the menu
if (PLAYING == -3)
{
    var _max, _max2;
    _max = menu_entries*32;
    _max2 = _max+8;
    
    if (menu_pos &gt; 0)
    {
        menu_pos -= max(menu_pos*0.25,2);
    }
    else
    {
        menu_pos = 0;
        PLAYING = 0;
        wp8_menu_clicked = 0;
        room_persistent = 0;
    }
    
    if (menu_text_pos &gt; 0)
    {
        menu_text_pos -= max(menu_text_pos*0.5,2);
    }
    else
    {
        menu_text_pos = 0
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///switch channels
if (device_mouse_check_button_pressed(0,mb_left)) &amp;&amp; (PLAYING &gt;= 0) &amp;&amp; (move_cursor == 0) &amp;&amp; (ch_click == 0) &amp;&amp; (pbbc == 0) &amp;&amp; (preview_clk == 0)
{
    var _chs;
    for (_chs = 0; _chs &lt;= 4; _chs ++)
    {
        if (device_mouse_x(0) &gt; 96+(_chs*24))
        &amp;&amp; (device_mouse_y(0) &gt; _start_h+260)
        &amp;&amp; (device_mouse_x(0) &lt; 96+((_chs+1)*24))
        &amp;&amp; (device_mouse_y(0) &lt; _start_h+276)
        {
            channel = _chs;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///1 - show piano roll
if (piano == 1)
{
    piano_fade += 0.1;
    if (piano_fade &gt;= 1)
    {
        piano = 2;
        piano_fade = 1;
    }
}
else if (piano == 2)
{
    piano_fade2 += 0.2;
    if (piano_fade2 &gt;= 1)
    {
        piano = 3;
        piano_fade2 = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///2A - piano control (ACTUAL PIANO)
if (piano == 3) &amp;&amp; (channel &lt;&gt; 4)
{
    var _mox, _moy;
    _mox = device_mouse_x(0);
    _moy = device_mouse_y(0);
    /////////////////////////////////////////////////PIANO ROLL
    if (device_mouse_check_button(0,mb_left)) &amp;&amp; (piano_vol == 0)
    &amp;&amp; (_moy &gt;= 92)
    &amp;&amp; (_moy &lt; 92+80)
    {
        var _output_note;
        _output_note = -1;
        piano_preview = 1;
        /////////////////////////////start minor keys 
        if (_mox &gt;= 41)
        &amp;&amp; (_mox &lt; 41+(18))
        &amp;&amp; (_moy &gt;= 92)
        &amp;&amp; (_moy &lt; 92+44)
        {
            //C# - 1
            _output_note = 1;
        }
        else if (_mox &gt;= 41+(28*1))
        &amp;&amp; (_mox &lt; (41+18)+(28*1))
        &amp;&amp; (_moy &gt;= 92)
        &amp;&amp; (_moy &lt; 92+44)
        {
            //D# - 3
            _output_note = 3;
        }
        else if (_mox &gt;= 41+(28*3))
        &amp;&amp; (_mox &lt; (41+18)+(28*3))
        &amp;&amp; (_moy &gt;= 92)
        &amp;&amp; (_moy &lt; 92+44)
        {
            //F# - 6
            _output_note = 6;
        }
        else if (_mox &gt;= 41+(28*4))
        &amp;&amp; (_mox &lt; (41+18)+(28*4))
        &amp;&amp; (_moy &gt;= 92)
        &amp;&amp; (_moy &lt; 92+44)
        {
            //G# - 8
            _output_note = 8;
        }
        else if (_mox &gt;= 41+(28*5))
        &amp;&amp; (_mox &lt; (41+18)+(28*5))
        &amp;&amp; (_moy &gt;= 92)
        &amp;&amp; (_moy &lt; 92+44)
        {
            //A# - 10
            _output_note = 10;
        }
        ////////////////////Start main keys
        else if (_mox &gt;= 21)
        &amp;&amp; (_mox &lt; 21+(28))
        &amp;&amp; (_moy &gt;= 92)
        &amp;&amp; (_moy &lt; 92+80)
        {
            //C - 0
            _output_note = 0;
        }
        else if (_mox &gt;= 21+(28))
        &amp;&amp; (_mox &lt; 21+(28*2))
        &amp;&amp; (_moy &gt;= 92)
        &amp;&amp; (_moy &lt; 92+80)
        {
            //D - 2
            _output_note = 2;
        }
        else if (_mox &gt;= 21+(28*2))
        &amp;&amp; (_mox &lt; 21+(28*3))
        &amp;&amp; (_moy &gt;= 92)
        &amp;&amp; (_moy &lt; 92+80)
        {
            //E - 4
            _output_note = 4;
        }
        else if (_mox &gt;= 21+(28*3))
        &amp;&amp; (_mox &lt; 21+(28*4))
        &amp;&amp; (_moy &gt;= 92)
        &amp;&amp; (_moy &lt; 92+80)
        {
            //F - 5
            _output_note = 5;
        }
        else if (_mox &gt;= 21+(28*4))
        &amp;&amp; (_mox &lt; 21+(28*5))
        &amp;&amp; (_moy &gt;= 92)
        &amp;&amp; (_moy &lt; 92+80)
        {
            //G - 7
            _output_note = 7;
        }
        else if (_mox &gt;= 21+(28*5))
        &amp;&amp; (_mox &lt; 21+(28*6))
        &amp;&amp; (_moy &gt;= 92)
        &amp;&amp; (_moy &lt; 92+80)
        {
            //A - 9
            _output_note = 9;
        }
        else if (_mox &gt;= 21+(28*6))
        &amp;&amp; (_mox &lt; 21+(28*7))
        &amp;&amp; (_moy &gt;= 92)
        &amp;&amp; (_moy &lt; 92+80)
        {
            //B - 11
            _output_note = 11;
        }
        var _ot;
        _ot = (cursor_pitch div 12)*12;
        if (_output_note &lt;&gt; -1)
        {
            var _old_n = cursor_pitch;
            ds_grid_set(__CHANNEL,0,_ppos,_ot+_output_note);
            ///PREVIEW NOTE!!!!!!!!!!!!!!!!!
            if (global.preview &lt;&gt; 0)
            {
                if (_ot+_output_note == _old_n) &amp;&amp; (piano_note_change == 0)
                {
                    piano_note_change = 1;
                }
                if (_ot+_output_note &lt;&gt; _old_n) &amp;&amp; (piano_note_change == 2)
                {
                    piano_note_change = 1;
                }
                event_user(6);
            }
        }
    }
    /////////////////////////////////////////////////OCTAVE ROLL
    if (device_mouse_check_button(0,mb_left)) &amp;&amp; (piano_vol == 0)
    &amp;&amp; (_moy &gt;= 212)
    &amp;&amp; (_moy &lt; 212+24)
    {
        piano_preview = 2;
        var _output_oct;
        _output_oct = -1;
        if (_mox &gt;= 21)
        &amp;&amp; (_mox &lt; 21+(28))
        {
            _output_oct = 0;
        }
        else if (_mox &gt;= 21+(28))
        &amp;&amp; (_mox &lt; 21+(28*2))
        {
            _output_oct = 1;
        }
        else if (_mox &gt;= 21+(28*2))
        &amp;&amp; (_mox &lt; 21+(28*3))
        {
            _output_oct = 2;
        }
        else if (_mox &gt;= 21+(28*3))
        &amp;&amp; (_mox &lt; 21+(28*4))
        {
            _output_oct = 3;
        }
        else if (_mox &gt;= 21+(28*4))
        &amp;&amp; (_mox &lt; 21+(28*5))
        {
            _output_oct = 4;
        }
        else if (_mox &gt;= 21+(28*5))
        &amp;&amp; (_mox &lt; 21+(28*6))
        {
            _output_oct = 5;
        }
        else if (_mox &gt;= 21+(28*6))
        &amp;&amp; (_mox &lt; 21+(28*7))
        {
            _output_oct = 6;
        }
        var _on;
        _on = cursor_pitch mod 12;
        if (_output_oct &lt;&gt; -1)
        {
            var _old_o = cursor_pitch;
            ds_grid_set(__CHANNEL,0,_ppos,_on+(_output_oct*12));
            ///PREVIEW OCTAVE!!!!!!!!!!!!!!!!!
            if (global.preview &lt;&gt; 0)
            {
                if (_on+(_output_oct*12) == _old_o) &amp;&amp; (piano_note_change == 0)
                {
                    piano_note_change = 1;
                }
                if (_on+(_output_oct*12) &lt;&gt; _old_o) &amp;&amp; (piano_note_change == 2)
                {
                    piano_note_change = 1;
                }
                event_user(6);
            }
        }
    }
    /////////////////////////////////////////////////Volume toggle
    if (device_mouse_check_button_pressed(0,mb_left)) &amp;&amp; (piano_vol == 0)
    &amp;&amp; (_moy &gt;= 266)
    &amp;&amp; (_moy &lt; 296)
    {
        piano_vol = 1;
    }
    if (piano_vol == 1)
    {
        var _percent;
        _percent = -1;
        if (_mox &gt;= 8) &amp;&amp; (_mox &lt;= room_width-8)
        {
            _percent = round( ((_mox-8)*10) / (room_width-16) )/10;
        }
        else if (_mox &lt; 8)
        {
            _percent = 0;
        }
        else if (_mox &gt; room_width-8)
        {
            _percent = 1;
        }
        if (device_mouse_check_button(0,mb_left)) &amp;&amp; (_percent &lt;&gt; -1)
        {
            ds_grid_set(__CHANNEL,1,_ppos,_percent);
            ///PREVIEW VOLUME!!!!!!!!!!!!!!!!!
            if (global.preview &lt;&gt; 0)
            {
                if (piano_note_change == 0)
                {
                    piano_note_change = 1;
                }
                event_user(6);
            }
        }
        else
        {
            if (global.preview &lt;&gt; 0)
            {
                if (piano_note_change &lt;&gt; 0)
                {
                    piano_preview = 0;
                    piano_note_change = 0;
                    audio_stop_all();
                }
            }
            piano_vol = 0;
        }
    }
    /////////////////////////////////////////////////Close
    if (device_mouse_check_button_pressed(0,mb_left)) &amp;&amp; (piano_vol == 0)
    &amp;&amp; (_moy &gt;= 300)
    &amp;&amp; (_moy &lt; 344)
    {
        piano_vol = 2;
    }
    if (piano_vol == 2)
    &amp;&amp; (device_mouse_check_button_released(0,mb_left))
    {
        if (_moy &gt;= 300)
        &amp;&amp; (_moy &lt; 344)
        {
            piano = 4;
        }
        else
        {
            if (global.preview &lt;&gt; 0)
            {
                piano_preview = 0;
                piano_note_change = 0;
                audio_stop_all();
            }
            piano_vol = 0;
        }
    }
    //backspace close
    if (keyboard_check_pressed(vk_backspace))
    {
        piano = 4;
    }
    
    ///stop preview
    if (global.preview &lt;&gt; 0)
    {
        if !(device_mouse_check_button(0,mb_left)) &amp;&amp; (piano_preview &lt;&gt; 0)
        {
            piano_preview = 0;
            piano_note_change = 0;
            audio_stop_all();
        }
        if ((piano_preview == 1) &amp;&amp; ((_moy &lt; 92) || (_moy &gt;= 92+80)))
        ^^ ((piano_preview == 2) &amp;&amp; ((_moy &lt; 212) || (_moy &gt;= 212+24)))
        ^^ ((piano_vol &lt;&gt; 0) &amp;&amp; ((_moy &lt; 266) || (_moy &gt;= 296)))
        {
            piano_preview = 0;
            piano_note_change = 0;
            audio_stop_all();
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///2B - piano control (NOISE/BEAT)
if (piano == 3) &amp;&amp; (channel == 4)
{
    var _mox, _moy, _hX, _hY, _pY;
    _mox = device_mouse_x(0);
    _moy = device_mouse_y(0);
    _hX = room_width*0.5;
    _hY = room_height*0.5;
    _pY = 160;
    /////////////////////////////////////////////////NOISE ROLL
    if (device_mouse_check_button(0,mb_left)) &amp;&amp; (piano_vol == 0)
    {
        var ns, total_noise, _output_bt;
        total_noise = 10;
        _output_bt = -1;
        for (ns = 0; ns &lt;= total_noise; ns ++)
        {
            var aNA, aNB;
            aNA = ns div round((total_noise+1)*0.5);
            aNB = ns mod round((total_noise+1)*0.5);
            if (_mox &gt;= (aNA*_hX))
            &amp;&amp; (_mox &lt; (aNA*_hX)+_hX)
            &amp;&amp; (_moy &gt;= (_hY-_pY)+(28+(32*aNB)))
            &amp;&amp; (_moy &lt; (_hY-_pY)+(52+(32*aNB)))
            {
                _output_bt = ns;
                if (_output_bt &lt;&gt; -1) &amp;&amp; (_output_bt &lt;&gt; cursor_pitch)
                {
                    ds_grid_set(__CHANNEL,0,_ppos,_output_bt);
                    if (global.preview &lt;&gt; 0)
                    {
                        //position = _ppos;
                        event_user(2);
                    }
                }
            }
        }
        
    }
    /////////////////////////////////////////////////Volume toggle
    var _va_offset;
    _va_offset = 24;
    if (device_mouse_check_button_pressed(0,mb_left)) &amp;&amp; (piano_vol == 0)
    &amp;&amp; (_moy &gt;= 266+_va_offset)
    &amp;&amp; (_moy &lt; 296+_va_offset)
    {
        piano_vol = 1;
    }
    if (piano_vol == 1)
    {
        var _percent;
        _percent = -1;
        if (_mox &gt;= 8) &amp;&amp; (_mox &lt;= room_width-8)
        {
            _percent = round( ((_mox-8)*10) / (room_width-16) )/10;
        }
        else if (_mox &lt; 8)
        {
            _percent = 0;
        }
        else if (_mox &gt; room_width-8)
        {
            _percent = 1;
        }
        if (device_mouse_check_button(0,mb_left)) &amp;&amp; (_percent &lt;&gt; -1)
        {
            var _cv_old;
            _cv_old = cursor_vol;
            ds_grid_set(__CHANNEL,1,_ppos,_percent);
            if (global.preview &lt;&gt; 0) &amp;&amp; (_percent &lt;&gt; _cv_old)
            {
                //position = _ppos;
                event_user(2);
            }
        }
        else
        {
            piano_vol = 0;
        }
    }
    /////////////////////////////////////////////////Close
    if (device_mouse_check_button_pressed(0,mb_left)) &amp;&amp; (piano_vol == 0)
    &amp;&amp; (_moy &gt;= 300+_va_offset)
    &amp;&amp; (_moy &lt; 344+_va_offset)
    {
        piano_vol = 2;
    }
    if (piano_vol == 2)
    &amp;&amp; (device_mouse_check_button_released(0,mb_left))
    {
        if (_moy &gt;= 300+_va_offset)
        &amp;&amp; (_moy &lt; 344+_va_offset)
        {
            piano = 4;
        }
        else
        {
            piano_vol = 0;
        }
    }
    if (keyboard_check_pressed(vk_backspace))
    {
        piano = 4;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///3 - hide piano roll
if (piano == 4)
{
    piano_fade2 -= 0.2;
    if (piano_fade2 &lt;= 0)
    {
        //if (global.preview &lt;&gt; 0)
        //{
            //position = _ppos;
            //event_user(2);
        //}
        piano = 5;
        piano_fade2 = 0;
    }
}
else if (piano == 5)
{
    piano_fade -= 0.1;
    if (piano_fade &lt;= 0)
    {
        piano = 0;
        piano_sel = 0;
        piano_fade = 0;
        piano_fade2 = 0;
        piano_vol = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fader animation steps
if (fade_out == 0)
{
    if (fader &gt; 0)
    {
        fader -= 0.05;
    }
    if (fader &lt; 0)
    {
        fader = 0;
    }
}
else
{
    if (fader &lt; 1)
    {
        fader += 0.05;
    }
    if (fader &gt;= 1)
    {
        event_user(4);
    }
    if (fader &gt; 1)
    {
        fader = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dialog thingy
var _DIALOG;
_DIALOG = ds_map_find_value(async_load,"id");
//change song name
if (_DIALOG == _dialog_name) &amp;&amp; (room == rm_maker)
{
    if (ds_map_find_value(async_load,"status"))
    {
        if (ds_map_find_value(async_load,"result") != "")
        {
            if (os_type == os_android) || (os_type == os_ios)
            {
                if (file_exists("projects\"+songname))
                {
                    file_delete("projects\"+songname);
                }
            }
            else
            {
                if (file_exists("projects\"+songname+".8t"))
                {
                    file_delete("projects\"+songname+".8t");
                }
            }
            songname = string_lettersdigits(ds_map_find_value(async_load,"result"));
            file_save();
            if (os_type == os_ios)
            {
                ios_bg = 0;
                keyboard_close();
            }
            saved = 1;
        }
    }
}

//confirm quit
//if (_DIALOG == _ask_save)
//{
//    if (ds_map_find_value(async_load,"status"))
//    {
//        if (ds_map_find_value(async_load,"status"))
//        {
//            room_goto(rm_projects);
//        }
//    }
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///begin/while/after sending data
if (ds_map_find_value(async_load, "id") == get)
{ // if the results for the level push are present
    if (ds_map_find_value(async_load, "status") == 0)
    { // if the status does not error
        r_str = ds_map_find_value(async_load, "result"); // assign the results to r_str
        locked = false; // unlock the text boxes
        //show_message(ds_map_find_value(async_load, "result"));
        switch (real(r_str))
        { // switch between the result (numbers)
            case (0): // 0 indicates a failure to connect to the database
                show_message("Failed to connect to the server!");
                break;
            case (1): // 1 indicates that the level was successfull!
                show_message("Your song is published!");
                break;
            case (2): // 2 indicates the authentification was invalid (someone's trying something funny &gt;:|)
                show_message("Unknown error! (2)");
                break; 
            case (3): // 3 indicates the level ID was already taken and the password does not match, so no edit was made
                show_message("Try changing your song name/username!");
                break;
            case (4): // 4 indicates the level was already in our database, but it has been successfully uploaded
                show_message("Publishing updated!");
                break;
        }

    }
    else
    {
        r_str = "null"; // error
        //show_message("Something went wrong fetching the data.");
    }
    PLAYING = -3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///preview current note (PIANO ROLL ONLY!)
//alarm[1] = 30;

//init
var _get_channel, _get_octave, _get_pitch, _get_raw, _get_vol, _sample;
switch (channel)
{
    case(0): _get_channel = channel_a; break;
    case(1): _get_channel = channel_b; break;
    case(2): _get_channel = channel_c; break;
    case(3): _get_channel = channel_d; break;
    case(4): _get_channel = channel_e; break;
}

_get_raw = ds_grid_get(_get_channel,0,position); //get pitch
_get_vol = ds_grid_get(_get_channel,1,position); //get volume
_get_octave = _get_raw div 12;
_get_pitch = _get_raw mod 12;

if (channel &lt;&gt; 4)
{
    //get the right sample for octaves
    //SQUARE-50%
    if (channel == 0)
    {
        
        switch (_get_octave)
        {
            case(0): _sample = snd_C1; break;
            case(1): _sample = snd_C2; break;
            case(2): _sample = snd_C3; break;
            case(3): _sample = snd_C4; break;
            case(4): _sample = snd_C5; break;
            case(5): _sample = snd_C6; break;
            case(6): _sample = snd_C7; break;
        }
    }
    
    //SQUARE-25%
    if (channel == 1)
    {
        switch (_get_octave)
        {
            case(0): _sample = snd_C1_25; break;
            case(1): _sample = snd_C2_25; break;
            case(2): _sample = snd_C3_25; break;
            case(3): _sample = snd_C4_25; break;
            case(4): _sample = snd_C5_25; break;
            case(5): _sample = snd_C6_25; break;
            case(6): _sample = snd_C7_25; break;
        }
    }
    
    //SQUARE-12.5%
    if (channel == 2)
    {
        switch (_get_octave)
        {
            case(0): _sample = snd_C1_125; break;
            case(1): _sample = snd_C2_125; break;
            case(2): _sample = snd_C3_125; break;
            case(3): _sample = snd_C4_125; break;
            case(4): _sample = snd_C5_125; break;
            case(5): _sample = snd_C6_125; break;
            case(6): _sample = snd_C7_125; break;
        }
    }
    
    //TRIANGLE
    if (channel == 3)
    {
        
        switch (_get_octave)
        {
            case(0): _sample = snd_C1_t; break;
            case(1): _sample = snd_C2_t; break;
            case(2): _sample = snd_C3_t; break;
            case(3): _sample = snd_C4_t; break;
            case(4): _sample = snd_C5_t; break;
            case(5): _sample = snd_C6_t; break;
            case(6): _sample = snd_C7_t; break;
        }
    }
    
    //get the right pitch
    switch (_get_pitch)
    {
        case(0): audio_sound_pitch(_sample,pitch_c); break;
        case(1): audio_sound_pitch(_sample,pitch_cM); break;
        case(2): audio_sound_pitch(_sample,pitch_d); break;
        case(3): audio_sound_pitch(_sample,pitch_dM); break;
        case(4): audio_sound_pitch(_sample,pitch_e); break;
        case(5): audio_sound_pitch(_sample,pitch_f); break;
        case(6): audio_sound_pitch(_sample,pitch_fM); break;
        case(7): audio_sound_pitch(_sample,pitch_g); break;
        case(8): audio_sound_pitch(_sample,pitch_gM); break;
        case(9): audio_sound_pitch(_sample,pitch_a); break;
        case(10): audio_sound_pitch(_sample,pitch_aM); break;
        case(11): audio_sound_pitch(_sample,pitch_b); break;
        default: audio_sound_pitch(_sample,pitch_c); break;
    }
    
    //set volume
    audio_sound_gain(_sample,_get_vol,0);
    
    //now play n loop
    if (piano_note_change == 1)
    {
        piano_note_change = 2;
        audio_stop_all();
        audio_play_sound(_sample,channel,1);
    }
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///paste &amp; replace this row of this channel
var _get_channel;
switch (channel)
{
    case(0): _get_channel = channel_a; break;
    case(1): _get_channel = channel_b; break;
    case(2): _get_channel = channel_c; break;
    case(3): _get_channel = channel_d; break;
    case(4): _get_channel = channel_e; break;
}

ds_grid_set_grid_region(_get_channel,COPY,0,0,1,16,0,row*16);
saved = 0;
PLAYING = -3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fader actions
if (ACTION == 1)
{
    visible = 0;
    room_goto(rm_settings);
}
if (ACTION == 2)
{
    room_goto(rm_projects);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///add row
//change max row variable
rows += 1;

//extend row space (don't delete existing rows)
if (ds_grid_height(channel_a) &lt; (rows+1)*16)
{
    ds_grid_resize(channel_a,2,(rows+1)*16);
    var _i;
    for (_i = 0; _i &lt; 16; _i += 1)
    {
        ds_grid_add(channel_a,0,(rows*16)+_i,-1); //sq50% - pitch
        ds_grid_add(channel_a,1,(rows*16)+_i,1); //sq50% - volume
    }
}
if (ds_grid_height(channel_b) &lt; (rows+1)*16)
{
    ds_grid_resize(channel_b,2,(rows+1)*16);
    var _i;
    for (_i = 0; _i &lt; 16; _i += 1)
    {
        ds_grid_add(channel_b,0,(rows*16)+_i,-1); //sq25% - pitch
        ds_grid_add(channel_b,1,(rows*16)+_i,1); //sq25% - volume
    }
}
if (ds_grid_height(channel_c) &lt; (rows+1)*16)
{
    ds_grid_resize(channel_c,2,(rows+1)*16);
    var _i;
    for (_i = 0; _i &lt; 16; _i += 1)
    {
        ds_grid_add(channel_c,0,(rows*16)+_i,-1); //sq12.5% - pitch
        ds_grid_add(channel_c,1,(rows*16)+_i,1); //sq12.5% - volume
    }
}
if (ds_grid_height(channel_d) &lt; (rows+1)*16)
{
    ds_grid_resize(channel_d,2,(rows+1)*16);
    var _i;
    for (_i = 0; _i &lt; 16; _i += 1)
    {
        ds_grid_add(channel_d,0,(rows*16)+_i,-1); //tri - pitch
        ds_grid_add(channel_d,1,(rows*16)+_i,1); //tri - volume
    }
}
if (ds_grid_height(channel_e) &lt; (rows+1)*16)
{
    ds_grid_resize(channel_e,2,(rows+1)*16);
    var _i;
    for (_i = 0; _i &lt; 16; _i += 1)
    {
        ds_grid_add(channel_e,0,(rows*16)+_i,-1); //ns/dpcm - pitch
        ds_grid_add(channel_e,1,(rows*16)+_i,1); //ns/dpcm - volume
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///preview current note
alarm[1] = 30;

//init
var _get_channel, _get_octave, _get_pitch, _get_raw, _get_vol, _sample;
switch (channel)
{
    case(0): _get_channel = channel_a; break;
    case(1): _get_channel = channel_b; break;
    case(2): _get_channel = channel_c; break;
    case(3): _get_channel = channel_d; break;
    case(4): _get_channel = channel_e; break;
}

_get_raw = ds_grid_get(_get_channel,0,position); //get pitch
_get_vol = ds_grid_get(_get_channel,1,position); //get volume
_get_octave = _get_raw div 12;
_get_pitch = _get_raw mod 12;

if (channel &lt;&gt; 4)
{
    //get the right sample for octaves
    //SQUARE-50%
    if (channel == 0)
    {
        
        switch (_get_octave)
        {
            case(0): _sample = snd_C1; break;
            case(1): _sample = snd_C2; break;
            case(2): _sample = snd_C3; break;
            case(3): _sample = snd_C4; break;
            case(4): _sample = snd_C5; break;
            case(5): _sample = snd_C6; break;
            case(6): _sample = snd_C7; break;
        }
    }
    
    //SQUARE-25%
    if (channel == 1)
    {
        switch (_get_octave)
        {
            case(0): _sample = snd_C1_25; break;
            case(1): _sample = snd_C2_25; break;
            case(2): _sample = snd_C3_25; break;
            case(3): _sample = snd_C4_25; break;
            case(4): _sample = snd_C5_25; break;
            case(5): _sample = snd_C6_25; break;
            case(6): _sample = snd_C7_25; break;
        }
    }
    
    //SQUARE-12.5%
    if (channel == 2)
    {
        switch (_get_octave)
        {
            case(0): _sample = snd_C1_125; break;
            case(1): _sample = snd_C2_125; break;
            case(2): _sample = snd_C3_125; break;
            case(3): _sample = snd_C4_125; break;
            case(4): _sample = snd_C5_125; break;
            case(5): _sample = snd_C6_125; break;
            case(6): _sample = snd_C7_125; break;
        }
    }
    
    //TRIANGLE
    if (channel == 3)
    {
        
        switch (_get_octave)
        {
            case(0): _sample = snd_C1_t; break;
            case(1): _sample = snd_C2_t; break;
            case(2): _sample = snd_C3_t; break;
            case(3): _sample = snd_C4_t; break;
            case(4): _sample = snd_C5_t; break;
            case(5): _sample = snd_C6_t; break;
            case(6): _sample = snd_C7_t; break;
        }
    }
    
    //get the right pitch
    switch (_get_pitch)
    {
        case(0): audio_sound_pitch(_sample,pitch_c); break;
        case(1): audio_sound_pitch(_sample,pitch_cM); break;
        case(2): audio_sound_pitch(_sample,pitch_d); break;
        case(3): audio_sound_pitch(_sample,pitch_dM); break;
        case(4): audio_sound_pitch(_sample,pitch_e); break;
        case(5): audio_sound_pitch(_sample,pitch_f); break;
        case(6): audio_sound_pitch(_sample,pitch_fM); break;
        case(7): audio_sound_pitch(_sample,pitch_g); break;
        case(8): audio_sound_pitch(_sample,pitch_gM); break;
        case(9): audio_sound_pitch(_sample,pitch_a); break;
        case(10): audio_sound_pitch(_sample,pitch_aM); break;
        case(11): audio_sound_pitch(_sample,pitch_b); break;
        default: audio_sound_pitch(_sample,pitch_c); break;
    }
    
    //set volume
    audio_sound_gain(_sample,_get_vol,0);
    
    //now play n loop
    audio_stop_all();
    audio_play_sound(_sample,channel,1);
    
    
}
//NOISE/DPCM
else if (channel == 4)
{
    switch (_get_raw)
    {
        case(0): _sample = snd_01; break;
        case(1): _sample = snd_02; break;
        case(2): _sample = snd_03; break;
        case(3): _sample = snd_04; break;
        case(4): _sample = snd_05; break;
        case(5): _sample = snd_06; break;
        case(6): _sample = snd_07; break;
        case(7): _sample = snd_08; break;
        case(8): _sample = snd_09; break;
        case(9): _sample = snd_10; break;
        case(10): _sample = snd_11; break;
    }
    
    //set volume
    audio_sound_gain(_sample,_get_vol,0);
    
    //now play n loop
    audio_stop_all();
    audio_play_sound(_sample,4,0);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WP8 menu click
if (device_mouse_check_button_pressed(0,mb_left)) &amp;&amp; !(instance_exists(o_question)) &amp;&amp; (PLAYING &lt;&gt; -4)
{
    //change song name
    if (device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; (room_height-menu_text_pos)+((((menu_entries-1)-10)*32))-8)
    &amp;&amp; (device_mouse_x(0) &lt; room_width-32)
    &amp;&amp; (device_mouse_y(0) &lt; (room_height-menu_text_pos)+((((menu_entries-1)-10)*32))+24)
    &amp;&amp; (name_changed == 0)
    {
        //change song name
        name_changed = 1;
        if (os_type == os_ios)
        {
            ios_bg = 1;
        }
        _dialog_name = get_string_async("What's the title for your song? (Letters and numbers only!) ",songname);
        wp8_menu_clicked = 1;
        PLAYING = -3;
        alarm[0] = 60;
    }
    
    if (device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; (room_height-menu_text_pos)+((((menu_entries-1)-9)*32))-8)
    &amp;&amp; (device_mouse_x(0) &lt; room_width)
    &amp;&amp; (device_mouse_y(0) &lt; (room_height-menu_text_pos)+((((menu_entries-1)-9)*32))+24)
    {
        //SAVE
        file_save();
        saved = 1;
        PLAYING = -3;
    }
    
    //SAVE AS TEXT FILE
    if (device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; (room_height-menu_text_pos)+((((menu_entries-1)-8)*32))-8)
    &amp;&amp; (device_mouse_x(0) &lt; room_width-32)
    &amp;&amp; (device_mouse_y(0) &lt; (room_height-menu_text_pos)+((((menu_entries-1)-8)*32))+24)
    {
        write_raw_txt_famitracker();
        PLAYING = -3;//wp8_menu_clicked = 2;
    }
    
    //SAVE AS CLIPBOARD
    if (device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; (room_height-menu_text_pos)+((((menu_entries-1)-7)*32))-8)
    &amp;&amp; (device_mouse_x(0) &lt; room_width-32)
    &amp;&amp; (device_mouse_y(0) &lt; (room_height-menu_text_pos)+((((menu_entries-1)-7)*32))+24)
    {
        //clipboard_set_text(project_to_string());
        //show_message('Copied to clipboard! Please paste it somewhere!');
        show_message('Coming soon!');
        PLAYING = -3;//wp8_menu_clicked = 2;
    }
    
    //PUBLISH TO ONLINE
    if (device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; (room_height-menu_text_pos)+((((menu_entries-1)-6)*32))-8)
    &amp;&amp; (device_mouse_x(0) &lt; room_width-32)
    &amp;&amp; (device_mouse_y(0) &lt; (room_height-menu_text_pos)+((((menu_entries-1)-6)*32))+24)
    {
        alarm[2] = 2;
        PLAYING = -4;//wp8_menu_clicked = 2;
    }
    
    //add row
    if (device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; (room_height-menu_text_pos)+((((menu_entries-1)-5)*32))-8)
    &amp;&amp; (device_mouse_x(0) &lt; room_width)
    &amp;&amp; (device_mouse_y(0) &lt; (room_height-menu_text_pos)+((((menu_entries-1)-5)*32))+24)
    &amp;&amp; (name_changed == 0)
    {
        //add row
        if (rows &lt; 127)
        {
            event_user(3);
            saved = 0;
            PLAYING = -3;
            wp8_menu_clicked = 3;
        }
    }
    //remove row
    if (device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; (room_height-menu_text_pos)+((((menu_entries-1)-4)*32))-8)
    &amp;&amp; (device_mouse_x(0) &lt; room_width)
    &amp;&amp; (device_mouse_y(0) &lt; (room_height-menu_text_pos)+((((menu_entries-1)-4)*32))+24)
    &amp;&amp; (name_changed == 0)
    {
        //remove row
        if (rows &gt; 0)
        {
            if (row == rows)
            {
                row -= 1;
            }
            rows -= 1;
            PLAYING = -3;
            //wp8_menu_clicked = 4;
            saved = 0;
        }
    }
    if (device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; (room_height-menu_text_pos)+((((menu_entries-1)-3)*32))-8)
    &amp;&amp; (device_mouse_x(0) &lt; room_width)
    &amp;&amp; (device_mouse_y(0) &lt; (room_height-menu_text_pos)+((((menu_entries-1)-3)*32))+24)
    &amp;&amp; (name_changed == 0)
    {
        //COPY ROW
        var _get_channel;
        switch (channel)
        {
            case(0): _get_channel = channel_a; break;
            case(1): _get_channel = channel_b; break;
            case(2): _get_channel = channel_c; break;
            case(3): _get_channel = channel_d; break;
            case(4): _get_channel = channel_e; break;
        }
        ds_grid_set_grid_region(COPY,_get_channel,0,row*16,1,(row+1)*16,0,0);
        PLAYING = -3;
        if (channel &lt;&gt; 4)
        {
            COPIED = 1;
        }
        else
        {
            COPIED = 2;
        }
    }
    if (device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; (room_height-menu_text_pos)+((((menu_entries-1)-2)*32))-8)
    &amp;&amp; (device_mouse_x(0) &lt; room_width)
    &amp;&amp; (device_mouse_y(0) &lt; (room_height-menu_text_pos)+((((menu_entries-1)-2)*32))+24)
    &amp;&amp; (COPIED &lt;&gt; 0)
    {
        //PASTE ROW
        if (COPIED == 2) &amp;&amp; (channel &lt;&gt; 4)
            {}
        else if (COPIED == 1) &amp;&amp; (channel == 4)
            {}
        else
        {
            _ask = instance_create(0,0,o_question);
            _ask.question = "Paste and replace this row?";
            _ask.goal = 3;
        }
    }
    if (device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; (room_height-menu_text_pos)+((((menu_entries-1)-1)*32))-8)
    &amp;&amp; (device_mouse_x(0) &lt; room_width)
    &amp;&amp; (device_mouse_y(0) &lt; (room_height-menu_text_pos)+((((menu_entries-1)-1)*32))+24)
    {
        //SETTINGS
        global.editor_setting = 1;
        PLAYING = -3;
        ACTION = 1;
        fade_out = 1;
        wp8_menu_clicked = 4;
    }
    if (device_mouse_x(0) &gt; 0)
    &amp;&amp; (device_mouse_y(0) &gt; (room_height-menu_text_pos)+((((menu_entries-1)-0)*32))-8)
    &amp;&amp; (device_mouse_x(0) &lt; room_width)
    &amp;&amp; (device_mouse_y(0) &lt; (room_height-menu_text_pos)+((((menu_entries-1)-0)*32))+24)
    {
        //EXIT
        if (saved == 1)
        {
            wp8_menu_clicked = 7;
            ACTION = 2;
            fade_out = 1;
            PLAYING = -3;
        }
        else
        {
            var _ask;
            _ask = instance_create(0,0,o_question);
            _ask.question = "Exit without saving?";
            _ask.goal = 2;
        }
    }
}

/*m_entry[0] = "Change Name";
m_entry[1] = "Settings";
m_entry[2] = "Save";
m_entry[3] = "Discard";
m_entry[4] = "Exit";*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///playback channel 0 (square 50%)
//init
var _get_octave, _get_pitch, _get_raw, _get_vol, _sample;
_get_raw = ds_grid_get(channel_a,0,position); //get pitch
_get_vol = ds_grid_get(channel_a,1,position); //get volume
_get_octave = _get_raw div 12;
_get_pitch = _get_raw mod 12;

//make sure it's not in a blank note
if (_get_raw != -1)
{
    //get the right sample for octaves
    switch (_get_octave)
    {
        case(0): _sample = snd_C1; break;
        case(1): _sample = snd_C2; break;
        case(2): _sample = snd_C3; break;
        case(3): _sample = snd_C4; break;
        case(4): _sample = snd_C5; break;
        case(5): _sample = snd_C6; break;
        case(6): _sample = snd_C7; break;
        default: _sample = snd_C4; break;
    }
    
    //get the right pitch
    switch (_get_pitch)
    {
        case(0): audio_sound_pitch(_sample,pitch_c); break;
        case(1): audio_sound_pitch(_sample,pitch_cM); break;
        case(2): audio_sound_pitch(_sample,pitch_d); break;
        case(3): audio_sound_pitch(_sample,pitch_dM); break;
        case(4): audio_sound_pitch(_sample,pitch_e); break;
        case(5): audio_sound_pitch(_sample,pitch_f); break;
        case(6): audio_sound_pitch(_sample,pitch_fM); break;
        case(7): audio_sound_pitch(_sample,pitch_g); break;
        case(8): audio_sound_pitch(_sample,pitch_gM); break;
        case(9): audio_sound_pitch(_sample,pitch_a); break;
        case(10): audio_sound_pitch(_sample,pitch_aM); break;
        case(11): audio_sound_pitch(_sample,pitch_b); break;
        default: audio_sound_pitch(_sample,pitch_c); break;
    }
    
    //set volume
    audio_sound_gain(_sample,_get_vol,0);
    
    //stop to prevent glitch
    audio_stop_sound(snd_C1);
    audio_stop_sound(snd_C2);
    audio_stop_sound(snd_C3);
    audio_stop_sound(snd_C4);
    audio_stop_sound(snd_C5);
    audio_stop_sound(snd_C6);
    audio_stop_sound(snd_C7);
    
    //now play n loop
    audio_play_sound(_sample,0,1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///playback channel 1 (square 25%)
//init
var _get_octave, _get_pitch, _get_raw, _get_vol, _sample;
_get_raw = ds_grid_get(channel_b,0,position); //get pitch
_get_vol = ds_grid_get(channel_b,1,position); //get volume
_get_octave = _get_raw div 12;
_get_pitch = _get_raw mod 12;

//make sure it's not in a blank note
if (_get_raw != -1)
{
    //get the right sample for octaves
    switch (_get_octave)
    {
        case(0): _sample = snd_C1_25; break;
        case(1): _sample = snd_C2_25; break;
        case(2): _sample = snd_C3_25; break;
        case(3): _sample = snd_C4_25; break;
        case(4): _sample = snd_C5_25; break;
        case(5): _sample = snd_C6_25; break;
        case(6): _sample = snd_C7_25; break;
        default: _sample = snd_C4_25; break;
    }
    
    //get the right pitch
    switch (_get_pitch)
    {
        case(0): audio_sound_pitch(_sample,pitch_c); break;
        case(1): audio_sound_pitch(_sample,pitch_cM); break;
        case(2): audio_sound_pitch(_sample,pitch_d); break;
        case(3): audio_sound_pitch(_sample,pitch_dM); break;
        case(4): audio_sound_pitch(_sample,pitch_e); break;
        case(5): audio_sound_pitch(_sample,pitch_f); break;
        case(6): audio_sound_pitch(_sample,pitch_fM); break;
        case(7): audio_sound_pitch(_sample,pitch_g); break;
        case(8): audio_sound_pitch(_sample,pitch_gM); break;
        case(9): audio_sound_pitch(_sample,pitch_a); break;
        case(10): audio_sound_pitch(_sample,pitch_aM); break;
        case(11): audio_sound_pitch(_sample,pitch_b); break;
        default: audio_sound_pitch(_sample,pitch_c); break;
    }
    
    //set volume
    audio_sound_gain(_sample,_get_vol,0);
    
    //stop to prevent glitch
    audio_stop_sound(snd_C1_25);
    audio_stop_sound(snd_C2_25);
    audio_stop_sound(snd_C3_25);
    audio_stop_sound(snd_C4_25);
    audio_stop_sound(snd_C5_25);
    audio_stop_sound(snd_C6_25);
    audio_stop_sound(snd_C7_25);
    
    //now play n loop
    audio_play_sound(_sample,1,1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///playback channel 2 (square 12.5)
//init
var _get_octave, _get_pitch, _get_raw, _get_vol, _sample;
_get_raw = ds_grid_get(channel_c,0,position); //get pitch
_get_vol = ds_grid_get(channel_c,1,position); //get volume
_get_octave = _get_raw div 12;
_get_pitch = _get_raw mod 12;

//make sure it's not in a blank note
if (_get_raw != -1)
{
    //get the right sample for octaves
    switch (_get_octave)
    {
        case(0): _sample = snd_C1_125; break;
        case(1): _sample = snd_C2_125; break;
        case(2): _sample = snd_C3_125; break;
        case(3): _sample = snd_C4_125; break;
        case(4): _sample = snd_C5_125; break;
        case(5): _sample = snd_C6_125; break;
        case(6): _sample = snd_C7_125; break;
        default: _sample = snd_C4_125; break;
    }
    
    //get the right pitch
    switch (_get_pitch)
    {
        case(0): audio_sound_pitch(_sample,pitch_c); break;
        case(1): audio_sound_pitch(_sample,pitch_cM); break;
        case(2): audio_sound_pitch(_sample,pitch_d); break;
        case(3): audio_sound_pitch(_sample,pitch_dM); break;
        case(4): audio_sound_pitch(_sample,pitch_e); break;
        case(5): audio_sound_pitch(_sample,pitch_f); break;
        case(6): audio_sound_pitch(_sample,pitch_fM); break;
        case(7): audio_sound_pitch(_sample,pitch_g); break;
        case(8): audio_sound_pitch(_sample,pitch_gM); break;
        case(9): audio_sound_pitch(_sample,pitch_a); break;
        case(10): audio_sound_pitch(_sample,pitch_aM); break;
        case(11): audio_sound_pitch(_sample,pitch_b); break;
        default: audio_sound_pitch(_sample,pitch_c); break;
    }
    
    //set volume
    audio_sound_gain(_sample,_get_vol,0);
    
    //stop to prevent glitch
    audio_stop_sound(snd_C1_125);
    audio_stop_sound(snd_C2_125);
    audio_stop_sound(snd_C3_125);
    audio_stop_sound(snd_C4_125);
    audio_stop_sound(snd_C5_125);
    audio_stop_sound(snd_C6_125);
    audio_stop_sound(snd_C7_125);
    
    //now play n loop
    audio_play_sound(_sample,2,1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///playback channel 3 (triangle)
//init
var _get_octave, _get_pitch, _get_raw, _get_vol, _sample;
_get_raw = ds_grid_get(channel_d,0,position); //get pitch
_get_vol = ds_grid_get(channel_d,1,position); //get volume
_get_octave = _get_raw div 12;
_get_pitch = _get_raw mod 12;

//make sure it's not in a blank note
if (_get_raw != -1)
{
    //get the right sample for octaves
    switch (_get_octave)
    {
        case(0): _sample = snd_C1_t; break;
        case(1): _sample = snd_C2_t; break;
        case(2): _sample = snd_C3_t; break;
        case(3): _sample = snd_C4_t; break;
        case(4): _sample = snd_C5_t; break;
        case(5): _sample = snd_C6_t; break;
        case(6): _sample = snd_C7_t; break;
        default: _sample = snd_C4_t; break;
    }
    
    //get the right pitch
    switch (_get_pitch)
    {
        case(0): audio_sound_pitch(_sample,pitch_c); break;
        case(1): audio_sound_pitch(_sample,pitch_cM); break;
        case(2): audio_sound_pitch(_sample,pitch_d); break;
        case(3): audio_sound_pitch(_sample,pitch_dM); break;
        case(4): audio_sound_pitch(_sample,pitch_e); break;
        case(5): audio_sound_pitch(_sample,pitch_f); break;
        case(6): audio_sound_pitch(_sample,pitch_fM); break;
        case(7): audio_sound_pitch(_sample,pitch_g); break;
        case(8): audio_sound_pitch(_sample,pitch_gM); break;
        case(9): audio_sound_pitch(_sample,pitch_a); break;
        case(10): audio_sound_pitch(_sample,pitch_aM); break;
        case(11): audio_sound_pitch(_sample,pitch_b); break;
        default: audio_sound_pitch(_sample,pitch_c); break;
    }
    
    //set volume
    audio_sound_gain(_sample,_get_vol,0);
    
    //stop to prevent glitch
    audio_stop_sound(snd_C1_t);
    audio_stop_sound(snd_C2_t);
    audio_stop_sound(snd_C3_t);
    audio_stop_sound(snd_C4_t);
    audio_stop_sound(snd_C5_t);
    audio_stop_sound(snd_C6_t);
    audio_stop_sound(snd_C7_t);
    
    //now play n loop
    audio_play_sound(_sample,3,1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///playback channel 4 (noise/beats)
//init
var _get_raw, _get_vol, _sample;
_get_raw = ds_grid_get(channel_e,0,position); //get pitch
_get_vol = ds_grid_get(channel_e,1,position); //get volume

//make sure it's not in a blank note
if (_get_raw != -1)
{
    //get the right sample for thingys
    switch (_get_raw)
    {
        case(0): _sample = snd_01; break;
        case(1): _sample = snd_02; break;
        case(2): _sample = snd_03; break;
        case(3): _sample = snd_04; break;
        case(4): _sample = snd_05; break;
        case(5): _sample = snd_06; break;
        case(6): _sample = snd_07; break;
        case(7): _sample = snd_08; break;
        case(8): _sample = snd_09; break;
        case(9): _sample = snd_10; break;
        case(10): _sample = snd_11; break;
        default: _sample = snd_01; break;
    }
    
    //set volume
    audio_sound_gain(_sample,_get_vol,0);
    
    //stop to prevent glitch
    audio_stop_sound(snd_01);
    audio_stop_sound(snd_02);
    audio_stop_sound(snd_03);
    audio_stop_sound(snd_04);
    audio_stop_sound(snd_05);
    audio_stop_sound(snd_06);
    audio_stop_sound(snd_07);
    audio_stop_sound(snd_08);
    audio_stop_sound(snd_09);
    audio_stop_sound(snd_10);
    audio_stop_sound(snd_11);
    
    //now play n loop
    audio_play_sound(_sample,4,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reset fader
if (fade_out &lt;&gt; 0) &amp;&amp; (room == rm_maker)
{
    visible = 1;
    fade_out = 0;
}

_digits_rw = string_length(string(row)); //rows &lt;&gt; button fix
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fader animation
draw_set_color(make_color_hsv(0,0,global.background*255));
draw_set_alpha(fader);
draw_rectangle(-8,-8,room_width+8,room_height+8,0);
draw_set_alpha(1);
draw_set_color(global.text_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render GUI
//init
draw_set_color(global.text_white);
draw_set_font(ft_gb_l);

//draw song name
draw_text(2,4,"song - "+songname);

//draw speed/tempo
if (string_length(string(tempo+1)) == 1)
{
    draw_text(2,24,"speed - 0"+string(tempo+1));
}
else
{
    draw_text(2,24,"speed - "+string(tempo+1));
}

//speed/tempo change arrow
if (ch_click &lt;&gt; 6)
{
    draw_sprite(s_lr,0,164,25);
}
else
{
    draw_sprite(s_lr,1+global.background,164,25);
}
if (ch_click &lt;&gt; 5)
{
    draw_sprite_ext(s_lr,0,156,25,-1,1,0,$FFFFFF,1);
}
else
{
    draw_sprite_ext(s_lr,1+global.background,156,25,-1,1,0,$FFFFFF,1);
}

//draw top bar
draw_set_color(global.text_white);
draw_set_alpha(0.15);
draw_rectangle(0,0,room_width,_start_h-24,0);
draw_set_alpha(1);

//get current channel
var __CHANNEL;
switch (channel)
{
    case(0): __CHANNEL = channel_a; break;
    case(1): __CHANNEL = channel_b; break;
    case(2): __CHANNEL = channel_c; break;
    case(3): __CHANNEL = channel_d; break;
    case(4): __CHANNEL = channel_e; break;
    default: __CHANNEL = channel_a; break;
}

//show channel &amp; cursor
draw_set_font(ft_gb_l);
draw_set_color(global.text_white);
draw_text(2,_start_h+260,"Channel");
var tx, txh;
txh = 26;
for (tx = 0; tx &lt;= 4; tx ++)
{
    if (tx == channel)
    {
        draw_set_alpha(0.6);
        draw_set_color(global.accent_color[global.accent]);
        draw_rectangle(96+(tx*txh),_start_h+260,95+((tx+1)*txh),_start_h+260+15,0);
        draw_set_alpha(1);
    }
    draw_set_color(global.text_white);
    draw_rectangle(96+(tx*txh),_start_h+260,96+((tx+1)*txh),_start_h+260+16,1);
    draw_rectangle(97+(tx*txh),_start_h+261,95+((tx+1)*txh),_start_h+259+16,1);
    draw_set_font(ft_gb);
    draw_text(103+(tx*txh),_start_h+260,string(tx));
}
var _txtt;
switch (channel)
{
    case(0): _txtt = "0:Sqr 50%"; break;
    case(1): _txtt = "1:Sqr 25%"; break;
    case(2): _txtt = "2:Sqr 12.5%"; break;
    case(3): _txtt = "3:Triangle"; break;
    case(4): _txtt = "4:Noise/Beats"; break;
}/*
draw_text(2,_start_h+260,"Channel "+string(channel));
if (ch_click &lt;&gt; 2)
{
    draw_sprite(s_lr,0,140,_start_h+260);
}
else
{
    draw_sprite(s_lr,1+global.background,140,_start_h+260);
}
if (ch_click &lt;&gt; 1)
{
    draw_sprite_ext(s_lr,0,132,_start_h+260,-1,1,0,$FFFFFF,1);
}
else
{
    draw_sprite_ext(s_lr,1+global.background,132,_start_h+260,-1,1,0,$FFFFFF,1);
}*/
draw_set_alpha(0.8);
draw_set_font(ft_gb_s);
draw_text(144,58,_txtt);
draw_set_font(ft_gb_l);
draw_set_alpha(1);

//show row &amp; cursor
draw_set_font(ft_gb_l);
draw_text(2,_start_h+280,"Row - "+string(row));
if (rows &gt; 0)
{
    if (ch_click &lt;&gt; 3) //OLD
    {
        draw_sprite_ext(s_ud,0,108+((_digits_rw-1)*12),_start_h+(280+16),-1,1,0,$FFFFFF,1);
    }
    else
    {
        draw_sprite_ext(s_ud,1+global.background,108+((_digits_rw-1)*12),_start_h+(280+16),-1,1,0,$FFFFFF,1);
    }
    if (ch_click &lt;&gt; 4)
    {
        draw_sprite_ext(s_ud,0,116+((_digits_rw-1)*12),_start_h+(280),1,-1,0,$FFFFFF,1);
    }
    else
    {
        draw_sprite_ext(s_ud,1+global.background,116+((_digits_rw-1)*12),_start_h+(280),1,-1,0,$FFFFFF,1);
    }
    /*if (ch_click &lt;&gt; 3) //OLD
    {
        draw_sprite_ext(s_lr,0,108+((_digits_rw-1)*12),_start_h+280,-1,1,0,$FFFFFF,1);
    }
    else
    {
        draw_sprite_ext(s_lr,1+global.background,108+((_digits_rw-1)*12),_start_h+280,-1,1,0,$FFFFFF,1);
    }
    if (ch_click &lt;&gt; 4)
    {
        draw_sprite_ext(s_lr,0,116+((_digits_rw-1)*12),_start_h+280,1,1,0,$FFFFFF,1);
    }
    else
    {
        draw_sprite_ext(s_lr,1+global.background,116+((_digits_rw-1)*12),_start_h+280,1,1,0,$FFFFFF,1);
    }*/
}

//draw_sprite_ext(s_pn,0,134+((_digits_rw-1)*12),_start_h+280,1,1,0,$FFFFFF,1);
//draw_sprite_ext(s_pn,1,152+((_digits_rw-1)*12),_start_h+280,1,1,0,$FFFFFF,1);

draw_set_font(ft_gb);
draw_set_color(global.text_white);
//draw legends
draw_text(2,48,"\#\#");
if (channel &lt;&gt; 4)
{
    draw_text(34,48,"PCH");
}
else
{
    draw_text(34,48,"TYP");
}
draw_text(82,48,"VOLM");


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///====PATTERN EDITOR====

//----pattern editor cursor----
draw_set_color(global.accent_color[global.accent]);
draw_set_alpha(0.5);
draw_rectangle(0,(cursor*16)+(_start_h),136,(cursor*16)+(_start_h+16),0);
draw_set_alpha(1);

//side editor [--&gt;]
//-----------when active-------------
if (cursor_active == 1) &amp;&amp; (PLAYING &lt;&gt; 1)
{
    //side editor box
    draw_set_color(global.text_white);
    draw_set_alpha(0.15);
    draw_rectangle(144,_start_h+8,236,_start_h+144,0);
    draw_set_alpha(1);
    
    //quick info
    draw_set_font(ft_gb_s);
    if (channel &lt;&gt; 4)
    {
        draw_text(146,_start_h+10,"Octave: "+string((cursor_pitch div 12)+1));
        draw_text(146,_start_h+20,"Pitch: "+pitch_string_raw(cursor_pitch));
        //draw_text(136,_start_h+240,"Pitch RAW-"+string(cursor_pitch));
    }
    else
    {
        draw_text(146,_start_h+10,"Type: "+string(cursor_pitch));
    }
    draw_text(146,_start_h+88,"Volume: "+string(round(cursor_vol*100)));
    
    ///2016 - PIANO ROLL BUTTON
    draw_set_color(global.accent_color[global.accent]);
    draw_set_alpha(0.5);
    if (piano_sel &lt;&gt; 0)
    {
        draw_rectangle(room_width-22,_start_h+48,room_width-7,_start_h+60,0);
    }
    draw_set_alpha(1);
    draw_sprite(s_piano_roll,global.background,room_width-22,_start_h+46);
    draw_set_color(global.text_white);

    //pitch modifier
    if (channel &lt;&gt; 4)
    {
        draw_sprite(s_ud,0,150,_start_h+46);  //Oct/top
        draw_sprite(s_ud,0,192,_start_h+46);  //pit/top
        draw_set_font(ft_gb_xl);
        if (global.reverse_PS == 1)
        {
            draw_text(146,_start_h+44,string((cursor_pitch div 12)+1)+"-"+pitch_string_raw(cursor_pitch));
        }
        else if (global.reverse_PS == 0)
        {
            draw_text(146,_start_h+44,pitch_string_raw(cursor_pitch)+"-"+string((cursor_pitch div 12)+1));
        }
        draw_sprite_ext(s_ud,0,150,_start_h+64,1,-1,0,$FFFFFF,1);  //oct/bot
        draw_sprite_ext(s_ud,0,192,_start_h+64,1,-1,0,$FFFFFF,1);  //pit/bot
    }
    else
    {
        draw_set_font(ft_gb_xl);
        draw_sprite(s_ud,0,150,_start_h+46);  //Oct/top
        draw_text(146,_start_h+44,string(cursor_pitch));
        draw_sprite_ext(s_ud,0,150,_start_h+64,1,-1,0,$FFFFFF,1);  //oct/bot
    }
    
    //volume modify
    draw_set_font(ft_gb_xl);
    draw_sprite(s_ud,0,166,_start_h+112);  //vol/top
    draw_text(146,_start_h+110,string(round(cursor_vol*100))+"%");
    draw_sprite_ext(s_ud,0,166,_start_h+130,1,-1,0,$FFFFFF,1);  //vol/bot
    
    //side editor box mini items
    if (global.background == 0)
    {
        draw_sprite(s_trashcan,0,162,_start_h+188);
        draw_sprite(s_speaker,0,196,_start_h+188);
        //CUT
        draw_sprite(s_ccp,0,148,_start_h+216);
        //COPY
        draw_sprite(s_ccp,1,178,_start_h+216);
        //PASTE
        if (channel &lt;&gt; 4)
        {
            draw_sprite_ext(s_ccp,2,208,_start_h+216,1,1,0,$FFFFFF,(COPIED*0.5)+0.5);
        }
        else
        {
            draw_sprite_ext(s_ccp,2,208,_start_h+216,1,1,0,$FFFFFF,(COPIED2*0.5)+0.5);
        }
    }
    else
    {
        draw_sprite_ext(s_trashcan,0,162,_start_h+188,1,1,0,$000000,1);
        draw_sprite_ext(s_speaker,0,196,_start_h+188,1,1,0,$000000,1);
        //CUT
        draw_sprite_ext(s_ccp,0,148,_start_h+216,1,1,0,$000000,1);
        //COPY
        draw_sprite_ext(s_ccp,1,178,_start_h+216,1,1,0,$000000,1);
        //PASTE
        if (channel &lt;&gt; 4)
        {
            draw_sprite_ext(s_ccp,2,208,_start_h+216,1,1,0,$000000,(COPIED*0.5)+0.5);
        }
        else
        {
            draw_sprite_ext(s_ccp,2,208,_start_h+216,1,1,0,$000000,(COPIED2*0.5)+0.5);
        }
    }
    
    //preview button
    //draw when clicked accent color
    if (preview_clk &lt;&gt; 0)
    {
        draw_set_color(global.accent_color[global.accent]);
        draw_rectangle(144,_start_h+154,236,_start_h+178,0);
        draw_set_color(global.text_white);
    }
    //then draw the actual button
    draw_set_color(global.text_white);
    draw_set_alpha(1);
    draw_rectangle(144,_start_h+154,236,_start_h+178,1);
    draw_rectangle(145,_start_h+155,235,_start_h+177,1);
    draw_set_font(ft_gb_s);
    draw_text(161,_start_h+161,"PREVIEW");
    
    
}
//-----------when muted-------------
if (cursor_active == 2) &amp;&amp; (PLAYING &lt;&gt; 1)
{
    //side editor box
    draw_set_color(global.text_white);
    draw_set_alpha(0.15);
    draw_rectangle(144,_start_h+8,236,_start_h+44,0);
    draw_set_alpha(1);
    
    //quick info
    draw_set_font(ft_gb);
    draw_set_halign(fa_center);
    draw_text(188,_start_h+10,"Tap to#unmute");
    if (global.background == 0)
    {
        draw_sprite(s_speaker,1,196,_start_h+48);
        draw_sprite(s_trashcan,0,162,_start_h+48);
        //PASTE
        if (channel &lt;&gt; 4)
        {
            draw_sprite_ext(s_ccp,2,178,_start_h+76,1,1,0,$FFFFFF,(COPIED*0.5)+0.5);
        }
        else
        {
            draw_sprite_ext(s_ccp,2,178,_start_h+76,1,1,0,$FFFFFF,(COPIED2*0.5)+0.5);
        }
    }
    else
    {
        draw_sprite_ext(s_speaker,1,196,_start_h+48,1,1,0,$000000,1);
        draw_sprite_ext(s_trashcan,0,162,_start_h+48,1,1,0,$000000,1);
        //PASTE
        if (channel &lt;&gt; 4)
        {
            draw_sprite_ext(s_ccp,2,178,_start_h+76,1,1,0,$000000,(COPIED*0.5)+0.5);
        }
        else
        {
            draw_sprite_ext(s_ccp,2,178,_start_h+76,1,1,0,$000000,(COPIED2*0.5)+0.5);
        }
    }
    draw_set_halign(fa_left);
}
//-----------when inactive-------------
if (cursor_active == 0) &amp;&amp; (PLAYING &lt;&gt; 1)
{
    //side editor box
    draw_set_color(global.text_white);
    draw_set_alpha(0.15);
    draw_rectangle(144,_start_h+8,236,_start_h+44,0);
    draw_set_alpha(1);
    
    //quick info
    draw_set_font(ft_gb);
    draw_set_halign(fa_center);
    draw_text(188,_start_h+10,"Tap to#add note");
    if (global.background == 0)
    {
        draw_sprite(s_trashcan,1,162,_start_h+48);
        draw_sprite(s_speaker,0,196,_start_h+48);
        //PASTE
        if (channel &lt;&gt; 4)
        {
            draw_sprite_ext(s_ccp,2,178,_start_h+76,1,1,0,$FFFFFF,(COPIED*0.5)+0.5);
        }
        else
        {
            draw_sprite_ext(s_ccp,2,178,_start_h+76,1,1,0,$FFFFFF,(COPIED2*0.5)+0.5);
        }
    }
    else
    {
        draw_sprite_ext(s_trashcan,1,162,_start_h+48,1,1,0,$000000,1);
        draw_sprite_ext(s_speaker,0,196,_start_h+48,1,1,0,$000000,1);
        //PASTE
        if (channel &lt;&gt; 4)
        {
            draw_sprite_ext(s_ccp,2,178,_start_h+76,1,1,0,$000000,(COPIED*0.5)+0.5);
        }
        else
        {
            draw_sprite_ext(s_ccp,2,178,_start_h+76,1,1,0,$000000,(COPIED2*0.5)+0.5);
        }
    }
    draw_set_halign(fa_left);
}

//patterns [&lt;&lt;--]
draw_set_font(ft_gb);
var _i;
for (_i = 0; _i &lt; 16; _i += 1)
{
    var _pit, _vol, _number, _pit_str, _vol_str, VOL;
    _pit = ds_grid_get(__CHANNEL,0,_i+(row*16)); //get pitch
    _vol = ds_grid_get(__CHANNEL,1,_i+(row*16)); //get volume
    VOL = round(_vol*100);
    //===start optimize digit number===
    //keep volume as 3 digits
    if (string_length(string(VOL)) == 1)
    {
        _vol_str = "00"+string(VOL)+"%";
    }
    else if (string_length(string(VOL)) == 2)
    {
        _vol_str = "0"+string(VOL)+"%";
    }
    else
    {
        _vol_str = string(VOL)+"%";
    }
    
    //counter ## must be 2 digits
    var _rawnum, _rawhex;
    _rawnum = ((row mod 4)*16)+_i;
    _rawhex = dec_to_hex(_rawnum);
    if (string_length(_rawhex) == 1)
    {
        _number = "0"+_rawhex;
    }
    else if (string_length(_rawhex) == 2)
    {
        _number = _rawhex;
    }
    else
    {
        _number = "00";
    }
    //===END optimize digit number===
    draw_set_color(global.text_white);
    //draw country ##
    draw_text(2,(_i*16)+_start_h,_number);
    //draw pitch/volume if this is used
    if (_pit != -1)
    {
        if (VOL &gt; 0)
        {
            draw_set_color(global.text_white);
            if (channel &lt;&gt; 4)
            {
                _pit_str = pitch_string(_pit); ///get actual string of PITCH (ignores octaves)
            }
            else
            {
                //keep 3 values
                if (string_length(string(_pit)) == 1)
                {
                    _pit_str = "00"+string(_pit);
                }
                else if (string_length(string(_pit)) == 2)
                {
                    _pit_str = "0"+string(_pit);
                }
                else
                {
                    _pit_str = string(_pit);
                }
            }
            draw_text(82,(_i*16)+_start_h,_vol_str);
        }
        else
        {
            draw_set_color(global.accent_color[global.accent]);
            _pit_str = "===";//mute string === 
            draw_text(82,(_i*16)+_start_h,"====");
        }
        draw_text(34,(_i*16)+_start_h,_pit_str);
        
    }
    //draw ---/---- as pitch/volume when not in use
    else
    {
        draw_set_color(global.text_edit);
        draw_text(34,(_i*16)+_start_h,"---");
        draw_text(82,(_i*16)+_start_h,"----");
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///playback controls
draw_set_color(global.accent_color[global.accent]);
//play selected
if (pbbc == 1)
{
    draw_circle(24,room_height-40,15,0);
}
//stop selected
else if (pbbc == 2)
{
    draw_circle(64,room_height-40,15,0);
}
//loop selected
else if (pbbc == 3)
{
    draw_circle(104,room_height-40,15,0);
}
//top selected
else if (pbbc == 4)
{
    draw_circle(144,room_height-40,15,0);
}
draw_set_color($FFFFFF);

//set correct buttons
var _btn_play, _btn_stop, _btn_loop;
if (global.background == 0)
{
    if (PLAYING == 1)
    {
        _btn_play = s_pause;
    }
    else
    {
        _btn_play = s_play;
    }
    _btn_stop = s_stop;
    _btn_top = s_top;
    if (LOOP == 0)
    {
        _btn_loop = s_loop_disabled;
    }
    else
    {
        _btn_loop = s_loop;
    }
}
if (global.background == 1)
{
    if (PLAYING == 1)
    {
        _btn_play = s_pause_b;
    }
    else
    {
        _btn_play = s_play_b;
    }
    _btn_stop = s_stop_b;
    _btn_top = s_top_b;
    if (LOOP == 0)
    {
        _btn_loop = s_loop_disabled_b;
    }
    else
    {
        _btn_loop = s_loop_b;
    }
}

//draw buttons
draw_sprite(_btn_play,0,8,room_height-56);
draw_sprite(_btn_stop,0,48,room_height-56);
draw_sprite(_btn_loop,0,88,room_height-56);
draw_sprite(_btn_top,0,128,room_height-56);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WP8 styled dots menu
//draw_text(0,0,menu_pos);

draw_set_color($000000);
draw_set_alpha(menu_pos/450);
draw_rectangle(0,0,room_width,room_height,0);


draw_set_color(global.menu_color);
draw_set_alpha(0.95);
draw_rectangle(0,room_height,room_width,room_height-14-menu_pos,0);
draw_set_alpha(1);
draw_set_color(global.text_white);
draw_set_font(ft_gb_s);
draw_text(room_width-32,room_height-15-menu_pos,"...");

//texts
var _n;
for (_n = 0; _n &lt; menu_entries; _n += 1)
{
    draw_set_font(ft_gb);
    if ((m_entry[menu_entries-1-_n] == "Remove the last row") &amp;&amp; (rows == 0))
    || ((m_entry[menu_entries-1-_n] == "Add row") &amp;&amp; (rows &gt;= 127))
    || ((m_entry[menu_entries-1-_n] == "Publish your song") &amp;&amp; (global.online == 0))
    || ((menu_entries-1-_n == 8) &amp;&amp; (COPIED == 0))
    {
        draw_set_color(global.text_disabled);
    }
    else
    {
        if ((menu_entries-1-_n &lt;&gt; 8))
        {
            draw_set_color(global.text_white);
        }
        else
        {
            if (COPIED == 2) &amp;&amp; (channel &lt;&gt; 4)
            {
                draw_set_color(global.text_disabled);
            }
            else if (COPIED == 1) &amp;&amp; (channel == 4)
            {
                draw_set_color(global.text_disabled);
            }
            else
            {
                draw_set_color(global.text_white);
            }
        }
    }
    draw_text(4,(room_height-menu_text_pos)+((((menu_entries-1)-_n)*32)),m_entry[menu_entries-1-_n]);
    
    draw_set_color(global.text_white);
}

//if (wp8_menu_clicked &lt;&gt; 0)
//{
//    draw_set_color(global.accent_color[global.accent]);
//    draw_text(4,(room_height-menu_text_pos)+((((menu_entries-2)-(wp8_menu_clicked))*24)),m_entry[menu_entries-2-(wp8_menu_clicked)]);
//}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A - piano roll (Actual Piano)
if (piano &lt;&gt; 0) &amp;&amp; (channel &lt;&gt; 4)
{
    //-1 - piano fader
    draw_set_color(make_color_hsv(0,0,global.background*255));
    draw_set_alpha(piano_fade*0.8);
    draw_rectangle(-8,-8,room_width+8,room_height+8,0);
    draw_set_alpha(1);
    draw_set_color(global.text_white);
    
    
    //00 - piano MAIN box
    draw_set_color(global.menu_color);
    var _hx, _hy, _py;
    _hx = room_width*0.5;
    _hy = (room_height*0.5)-32;
    _py = 96;
    draw_rectangle(_hx-(piano_fade*_hx),_hy-(piano_fade*_py)-20,_hx+(piano_fade*_hx),_hy+(piano_fade*(_py))+64,0);
    
    //01 - draw piano roll
    draw_set_color(global.text_white);
    draw_set_alpha(piano_fade2);
    draw_set_font(ft_gb);
    draw_text(8,(_hy-_py)-16,'pitch:');
    draw_set_alpha(1);
    var _key_width, K, _KX, KM, MM, MO;
    _key_width = 28;
    _KX = (room_width-(_key_width*7))*0.5;
    MM = 5;
    MO = _key_width*0.5;
    for (K = 0; K &lt;= 6; K ++)
    {
        if (((cursor_pitch mod 12) == 0) &amp;&amp; (K == 0))
        ^^ (((cursor_pitch mod 12) == 2) &amp;&amp; (K == 1))
        ^^ (((cursor_pitch mod 12) == 4) &amp;&amp; (K == 2))
        ^^ (((cursor_pitch mod 12) == 5) &amp;&amp; (K == 3))
        ^^ (((cursor_pitch mod 12) == 7) &amp;&amp; (K == 4))
        ^^ (((cursor_pitch mod 12) == 9) &amp;&amp; (K == 5))
        ^^ (((cursor_pitch mod 12) == 11) &amp;&amp; (K == 6))
        {
            draw_set_color(global.accent_color[global.accent]);
            draw_set_alpha(piano_fade2*0.6);
            draw_rectangle(_KX+(K*_key_width),(_hy-_py)+8,_KX+((K+1)*_key_width),(_hy-_py)+88,0);
        }
        draw_set_color(global.text_white);
        draw_set_alpha(piano_fade2);
        draw_rectangle(_KX+(K*_key_width),(_hy-_py)+8,_KX+((K+1)*_key_width),(_hy-_py)+88,1);
        draw_rectangle((_KX+(K*_key_width))+1,(_hy-_py)+9,(_KX+((K+1)*_key_width))-1,(_hy-_py)+87,1);
        draw_set_alpha(1);
        var _kt;
        _kt = '';
        switch (K)
        {
            case(0): _kt = 'C'; break;
            case(1): _kt = 'D'; break;
            case(2): _kt = 'E'; break;
            case(3): _kt = 'F'; break;
            case(4): _kt = 'G'; break;
            case(5): _kt = 'A'; break;
            case(6): _kt = 'B'; break;
        }
        draw_set_font(ft_gb);
        draw_set_color(global.text_white);
        draw_set_alpha(piano_fade2);
        draw_text(_KX+(K*_key_width)+8,(_hy-_py)+68,_kt);
        draw_set_alpha(1);
    }
    for (KM = 0; KM &lt;= 5; KM ++)
    {
        draw_set_color(global.text_white);
        draw_set_alpha(piano_fade2);
        if (KM &lt;&gt; 2)
        {
            draw_rectangle((_KX+MO+MM)+(KM*_key_width),(_hy-_py)+8,(_KX+MO-MM)+((KM+1)*_key_width),(_hy-_py)+56,0);
            if (((cursor_pitch mod 12) == 1) &amp;&amp; (KM == 0))
            ^^ (((cursor_pitch mod 12) == 3) &amp;&amp; (KM == 1))
            ^^ (((cursor_pitch mod 12) == 6) &amp;&amp; (KM == 3))
            ^^ (((cursor_pitch mod 12) == 8) &amp;&amp; (KM == 4))
            ^^ (((cursor_pitch mod 12) == 10) &amp;&amp; (KM == 5))
            {
                draw_set_alpha(piano_fade2);
                draw_set_color(global.menu_color);
                draw_rectangle((_KX+MO+MM+2)+(KM*_key_width),(_hy-_py)+10,(_KX+MO-(MM+2))+((KM+1)*_key_width),(_hy-_py)+54,0);
                draw_set_color(global.accent_color[global.accent]);
                draw_set_alpha(piano_fade2*0.6);
                draw_rectangle((_KX+MO+MM+2)+(KM*_key_width),(_hy-_py)+10,(_KX+MO-(MM+2))+((KM+1)*_key_width),(_hy-_py)+54,0);
            }
        }
        draw_set_alpha(1);
    }
    
    //02 - draw octave roll
    draw_set_color(global.text_white);
    draw_set_alpha(piano_fade2);
    draw_set_font(ft_gb);
    draw_text(8,(_hy-_py)+104,'octave:');
    draw_set_alpha(1);
    var O;
    for (O = 0; O &lt;= 6; O ++)
    {
        if ((cursor_pitch div 12) == O)
        {
            draw_set_color(global.accent_color[global.accent]);
            draw_set_alpha(piano_fade2*0.6);
            draw_rectangle(_KX+(O*_key_width),(_hy-_py)+128,_KX+((O+1)*_key_width),(_hy-_py)+152,0);
        }
        draw_set_color(global.text_white);
        draw_set_alpha(piano_fade2);
        draw_rectangle(_KX+(O*_key_width),(_hy-_py)+128,_KX+((O+1)*_key_width),(_hy-_py)+152,1);
        draw_rectangle((_KX+(O*_key_width))+1,(_hy-_py)+129,(_KX+((O+1)*_key_width))-1,(_hy-_py)+151,1);
        draw_set_alpha(1);
        draw_set_font(ft_gb);
        draw_set_color(global.text_white);
        draw_set_alpha(piano_fade2);
        draw_text(_KX+(O*_key_width)+8,(_hy-_py)+132,O+1);
        draw_set_alpha(1);
    }
    
    //03 - draw volume slider
    var PC;
    PC = room_width-16;
    draw_set_color(global.text_white);
    draw_set_alpha(piano_fade2);
    draw_set_font(ft_gb);
    draw_text(8,(_hy-_py)+168,'volume:');
    draw_rectangle(8,(_hy-_py)+196,room_width-8,(_hy-_py)+197,0);
    draw_rectangle(8,(_hy-_py)+184,9,(_hy-_py)+208,0);
    draw_rectangle(room_width-8,(_hy-_py)+184,room_width-9,(_hy-_py)+208,0);
    draw_rectangle(room_width*0.5,(_hy-_py)+188,(room_width*0.5)+1,(_hy-_py)+204,0);
    draw_rectangle(8+(PC*0.1),(_hy-_py)+192,9+(PC*0.1),(_hy-_py)+200,0);
    draw_rectangle(8+(PC*0.2),(_hy-_py)+192,9+(PC*0.2),(_hy-_py)+200,0);
    draw_rectangle(8+(PC*0.3),(_hy-_py)+192,9+(PC*0.3),(_hy-_py)+200,0);
    draw_rectangle(8+(PC*0.4),(_hy-_py)+192,9+(PC*0.4),(_hy-_py)+200,0);
    draw_rectangle(8+(PC*0.6),(_hy-_py)+192,9+(PC*0.6),(_hy-_py)+200,0);
    draw_rectangle(8+(PC*0.7),(_hy-_py)+192,9+(PC*0.7),(_hy-_py)+200,0);
    draw_rectangle(8+(PC*0.8),(_hy-_py)+192,9+(PC*0.8),(_hy-_py)+200,0);
    draw_rectangle(8+(PC*0.9),(_hy-_py)+192,9+(PC*0.9),(_hy-_py)+200,0);
    draw_set_color(global.accent_color[global.accent]);
    draw_rectangle(8,(_hy-_py)+196,8+(PC*cursor_vol),(_hy-_py)+197,0);
    draw_set_color(global.text_white);
    draw_circle(8+(PC*cursor_vol),(_hy-_py)+197,8,0);
    draw_set_color(global.accent_color[global.accent]);
    draw_circle(8+(PC*cursor_vol),(_hy-_py)+197,6,0);
    draw_set_alpha(1);
    
    //04 - apply button
    if (piano_vol == 2)
    {
        draw_set_color(global.accent_color[global.accent]);
        draw_set_alpha(piano_fade2*0.6);
        draw_rectangle(8,(_hy-_py)+228,room_width-8,(_hy-_py)+248,0);
    }
    draw_set_color(global.text_white);
    draw_set_alpha(piano_fade2);
    draw_rectangle(8,(_hy-_py)+228,room_width-8,(_hy-_py)+248,1);
    draw_rectangle(9,(_hy-_py)+229,room_width-9,(_hy-_py)+247,1);
    draw_set_halign(fa_center);
    draw_text(room_width*0.5,(_hy-_py)+230,'APPLY');
    draw_set_halign(fa_left);
    draw_set_alpha(1);
    ///DEBUG PURPOSE
    //draw_set_color(global.text_white);
    //draw_text(0,0,'x = '+string(device_mouse_x(0)));
    //draw_text(0,12,'y = '+string(device_mouse_y(0)));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///B - piano roll (NOISE)
if (piano &lt;&gt; 0) &amp;&amp; (channel == 4)
{
    //-1 - piano fader
    draw_set_color(make_color_hsv(0,0,global.background*255));
    draw_set_alpha(piano_fade*0.8);
    draw_rectangle(-8,-8,room_width+8,room_height+8,0);
    draw_set_alpha(1);
    draw_set_color(global.text_white);
    
    
    //00 - piano MAIN box
    draw_set_color(global.menu_color);
    var _hx, _hy, _py;
    _hx = room_width*0.5;
    _hy = room_height*0.5;
    _py = 160;
    draw_rectangle(_hx-(piano_fade*_hx),_hy-(piano_fade*_py),_hx+(piano_fade*_hx),_hy+(piano_fade*(_py)),0);
    
    //01- draw noise roll
    var N, total_noise;
    total_noise = 10;
    draw_set_color(global.text_white);
    draw_set_alpha(piano_fade2);
    draw_set_font(ft_gb);
    draw_text(8,(_hy-_py)+4,'beat:');
    for (N = 0; N &lt;= total_noise; N ++)
    {
        var NA, NB;
        NA = N div round((total_noise+1)*0.5);
        NB = N mod round((total_noise+1)*0.5);
        //highlighted (current) box
        if (N == cursor_pitch)
        {
            draw_set_alpha(piano_fade2*0.6);
            draw_set_color(global.accent_color[global.accent]);
            draw_rectangle(4+(NA*_hx),(_hy-_py)+(28+(32*NB)),32+(NA*_hx),(_hy-_py)+(52+(32*NB)),0);
        }
        draw_set_alpha(piano_fade2);
        draw_set_color(global.text_white);
        //box
        draw_rectangle(4+(NA*_hx),(_hy-_py)+(28+(32*NB)),32+(NA*_hx),(_hy-_py)+(52+(32*NB)),1);
        draw_rectangle(5+(NA*_hx),(_hy-_py)+(29+(32*NB)),31+(NA*_hx),(_hy-_py)+(51+(32*NB)),1);
        draw_set_font(ft_gb);
        draw_set_color(global.text_white);
        draw_set_alpha(piano_fade2);
        //text (in the box)
        if (N &lt; 10)
        {
            draw_text(12+(NA*_hx),(_hy-_py)+(32+(32*NB)),N);
        }
        else
        {
            draw_text(6+(NA*_hx),(_hy-_py)+(32+(32*NB)),N);
        }
        //text (by the box)
        var _txt
        _txt = '';
        switch (N)
        {
            case(0): _txt = 'hi-mat'; break;
            case(1): _txt = 'tom'; break;
            case(2): _txt = 'crymbal'; break;
            case(3): _txt = 'lo-mat'; break;
            case(4): _txt = 'pulse'; break;
            case(5): _txt = 'beat'; break;
            case(6): _txt = 'snare'; break;
            case(7): _txt = 'drum'; break;
            case(8): _txt = 'wood'; break;
            case(9): _txt = 'metal'; break;
            case(10): _txt = 'MM beat'; break;
        }
        draw_text(36+(NA*_hx),(_hy-_py)+(32+(32*NB)),_txt);
        if (N == cursor_pitch)
        {
            draw_set_alpha(piano_fade2*0.6);
            draw_set_color(global.accent_color[global.accent]);
            draw_text(36+(NA*_hx),(_hy-_py)+(32+(32*NB)),_txt);
        }
        draw_set_alpha(1);
    }
    
    //02 - draw volume slider
    var PC, Base;
    PC = room_width-16;
    Base = 228; //168+60 + (32 for py) (actual: +92)
    draw_set_color(global.text_white);
    draw_set_alpha(piano_fade2);
    draw_set_font(ft_gb);
    draw_text(8,(_hy-_py)+Base,'volume:'); //0
    draw_rectangle(8,(_hy-_py)+(Base+28),room_width-8,(_hy-_py)+(Base+29),0); //28-29
    draw_rectangle(8,(_hy-_py)+(Base+16),9,(_hy-_py)+(Base+40),0); //16-40
    draw_rectangle(room_width-8,(_hy-_py)+(Base+16),room_width-9,(_hy-_py)+(Base+40),0); //16-40
    draw_rectangle(room_width*0.5,(_hy-_py)+(Base+20),(room_width*0.5)+1,(_hy-_py)+(Base+36),0); //20-36
    draw_rectangle(8+(PC*0.1),(_hy-_py)+(Base+24),9+(PC*0.1),(_hy-_py)+(Base+32),0); //24-32
    draw_rectangle(8+(PC*0.2),(_hy-_py)+(Base+24),9+(PC*0.2),(_hy-_py)+(Base+32),0);
    draw_rectangle(8+(PC*0.3),(_hy-_py)+(Base+24),9+(PC*0.3),(_hy-_py)+(Base+32),0);
    draw_rectangle(8+(PC*0.4),(_hy-_py)+(Base+24),9+(PC*0.4),(_hy-_py)+(Base+32),0);
    draw_rectangle(8+(PC*0.6),(_hy-_py)+(Base+24),9+(PC*0.6),(_hy-_py)+(Base+32),0);
    draw_rectangle(8+(PC*0.7),(_hy-_py)+(Base+24),9+(PC*0.7),(_hy-_py)+(Base+32),0);
    draw_rectangle(8+(PC*0.8),(_hy-_py)+(Base+24),9+(PC*0.8),(_hy-_py)+(Base+32),0);
    draw_rectangle(8+(PC*0.9),(_hy-_py)+(Base+24),9+(PC*0.9),(_hy-_py)+(Base+32),0);
    draw_set_color(global.accent_color[global.accent]);
    draw_rectangle(8,(_hy-_py)+(Base+28),8+(PC*cursor_vol),(_hy-_py)+(Base+29),0);
    draw_set_color(global.text_white);
    draw_circle(8+(PC*cursor_vol),(_hy-_py)+(Base+29),8,0);
    draw_set_color(global.accent_color[global.accent]);
    draw_circle(8+(PC*cursor_vol),(_hy-_py)+(Base+29),6,0);
    draw_set_alpha(1);
    
    //03 - apply button
    if (piano_vol == 2)
    {
        draw_set_color(global.accent_color[global.accent]);
        draw_set_alpha(piano_fade2*0.6);
        draw_rectangle(8,(_hy-_py)+(Base+60),room_width-8,(_hy-_py)+(Base+80),0);
    }
    draw_set_color(global.text_white);
    draw_set_alpha(piano_fade2);
    draw_rectangle(8,(_hy-_py)+(Base+60),room_width-8,(_hy-_py)+(Base+80),1);
    draw_rectangle(9,(_hy-_py)+(Base+61),room_width-9,(_hy-_py)+(Base+79),1);
    draw_set_halign(fa_center);
    draw_text(room_width*0.5,(_hy-_py)+(Base+62),'APPLY');
    draw_set_halign(fa_left);
    draw_set_alpha(1);
    ///DEBUG PURPOSE
    //draw_set_color(global.text_white);
    //draw_text(0,0,'x = '+string(device_mouse_x(0)));
    //draw_text(0,12,'y = '+string(device_mouse_y(0)));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fader animation
draw_set_color(make_color_hsv(0,0,global.background*255));
draw_set_alpha(fader);
draw_rectangle(-8,-8,room_width+8,room_height+8,0);
draw_set_alpha(1);
draw_set_color(global.text_white);

if (ios_bg &lt;&gt; 0)
{
    draw_set_color(make_color_hsv(0,0,global.background*255));
    draw_set_alpha(0.7);
    draw_rectangle(-8,-8,room_width+8,room_height+8,0);
    draw_set_alpha(1);
    draw_set_color(global.text_white);
}

if (PLAYING == -4)
{
    draw_set_color($000000);
    draw_set_alpha(0.8);
    draw_rectangle(0,0,room_width,room_height,0);
    
    draw_set_font(ft_gb_s);
    draw_set_alpha(1);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    var _send_da_file = '';
    if (global.online == 1)
    {
        _send_da_file = 'Sending...##Please do not#leave the app!';
    }
    else
    {
        _send_da_file = 'ERROR'
    }
    draw_text((room_width*0.5)+1,(room_height*0.5)+1,_send_da_file);
    draw_set_color($FFFFFF);
    draw_text((room_width*0.5),room_height*0.5,_send_da_file);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="84">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///write txt file
if (os_type == os_windows)
{
    write_raw_txt_famitracker();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG - add rows
if (rows &lt; 511)
{
    event_user(3);
    saved = 0;
    PLAYING = -3;
    wp8_menu_clicked = 3;
}
else
{
    show_message('Row limit reached!!!');
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG - reset piano/ios_bg
//piano = 0;
//piano_sel = 0;
//piano_fade = 0;
//piano_fade2 = 0;
//piano_vol = 0;
/////////////
switch (ios_bg)
{
    case (0): ios_bg = 1; break;
    case (1): ios_bg = 0; break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
