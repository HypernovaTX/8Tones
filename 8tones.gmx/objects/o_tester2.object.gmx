<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init
major = 0;
octave = 4;
RAW = snd_C1;
type = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set octaves
//50% square
if (type == 0)
{
    switch (octave)
    {
        case(1): RAW = snd_C1; break;
        case(2): RAW = snd_C2; break;
        case(3): RAW = snd_C3; break;
        case(4): RAW = snd_C4; break;
        case(5): RAW = snd_C5; break;
        case(6): RAW = snd_C6; break;
        case(7): RAW = snd_C7; break;
        default: RAW = snd_C1; break;
    }
}

//25% square
if (type == 1)
{
    switch (octave)
    {
        case(1): RAW = snd_C1_25; break;
        case(2): RAW = snd_C2_25; break;
        case(3): RAW = snd_C3_25; break;
        case(4): RAW = snd_C4_25; break;
        case(5): RAW = snd_C5_25; break;
        case(6): RAW = snd_C6_25; break;
        case(7): RAW = snd_C7_25; break;
        default: RAW = snd_C1_25; break;
    }
}

//12.5% square
if (type == 2)
{
    switch (octave)
    {
        case(1): RAW = snd_C1_125; break;
        case(2): RAW = snd_C2_125; break;
        case(3): RAW = snd_C3_125; break;
        case(4): RAW = snd_C4_125; break;
        case(5): RAW = snd_C5_125; break;
        case(6): RAW = snd_C6_125; break;
        case(7): RAW = snd_C7_125; break;
        default: RAW = snd_C1_125; break;
    }
}

//triangle
if (type == 3)
{
    switch (octave)
    {
        case(1): RAW = snd_C1_t; break;
        case(2): RAW = snd_C2_t; break;
        case(3): RAW = snd_C3_t; break;
        case(4): RAW = snd_C4_t; break;
        case(5): RAW = snd_C5_t; break;
        case(6): RAW = snd_C6_t; break;
        case(7): RAW = snd_C7_t; break;
        default: RAW = snd_C1_t; break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change octave
var _oct;
_oct = 7;
if (keyboard_check_pressed(vk_right)) &amp;&amp; !(audio_is_playing(RAW))
{
    if (octave &lt;= _oct-1)
    {
        octave += 1;
    }
    else
    {
        octave = 1;
    }
}

if (keyboard_check_pressed(vk_left)) &amp;&amp; !(audio_is_playing(RAW))
{
    if (octave &gt;= 2)
    {
        octave -= 1;
    }
    else
    {
        octave = _oct;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change wave type
var _typ;
_typ = 3;
if (keyboard_check_pressed(vk_up)) &amp;&amp; !(audio_is_playing(RAW))
{
    if (type &lt;= _typ-1)
    {
        type += 1;
    }
    else
    {
        type = 0;
    }
}

if (keyboard_check_pressed(vk_down)) &amp;&amp; !(audio_is_playing(RAW))
{
    if (type &gt;= 1)
    {
        type -= 1;
    }
    else
    {
        type = _typ;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press C
if (keyboard_check_pressed(ord('Z')))
{
    audio_play_sound(RAW,0,1);
    audio_sound_pitch(RAW,pitch_c);
}
if (keyboard_check_released(ord('Z')))
{
    audio_stop_sound(RAW);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press C#
if (keyboard_check_pressed(ord('S')))
{
    audio_play_sound(RAW,0,1);
    audio_sound_pitch(RAW,pitch_cM);
}
if (keyboard_check_released(ord('S')))
{
    audio_stop_sound(RAW);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press D
if (keyboard_check_pressed(ord('X')))
{
    audio_play_sound(RAW,0,1);
    audio_sound_pitch(RAW,pitch_d);
}
if (keyboard_check_released(ord('X')))
{
    audio_stop_sound(RAW);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press D#
if (keyboard_check_pressed(ord('D')))
{
    audio_play_sound(RAW,0,1);
    audio_sound_pitch(RAW,pitch_dM);
}
if (keyboard_check_released(ord('D')))
{
    audio_stop_sound(RAW);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press E
if (keyboard_check_pressed(ord('C')))
{
    audio_play_sound(RAW,0,1);
    audio_sound_pitch(RAW,pitch_e);
}
if (keyboard_check_released(ord('C')))
{
    audio_stop_sound(RAW);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press F
if (keyboard_check_pressed(ord('V')))
{
    audio_play_sound(RAW,0,1);
    audio_sound_pitch(RAW,pitch_f);
}
if (keyboard_check_released(ord('V')))
{
    audio_stop_sound(RAW);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press F#
if (keyboard_check_pressed(ord('G')))
{
    audio_play_sound(RAW,0,1);
    audio_sound_pitch(RAW,pitch_fM);
}
if (keyboard_check_released(ord('G')))
{
    audio_stop_sound(RAW);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press G
if (keyboard_check_pressed(ord('B')))
{
    audio_play_sound(RAW,0,1);
    audio_sound_pitch(RAW,pitch_g);
}
if (keyboard_check_released(ord('B')))
{
    audio_stop_sound(RAW);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press G#
if (keyboard_check_pressed(ord('H')))
{
    audio_play_sound(RAW,0,1);
    audio_sound_pitch(RAW,pitch_gM);
}
if (keyboard_check_released(ord('H')))
{
    audio_stop_sound(RAW);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press A
if (keyboard_check_pressed(ord('N')))
{
    audio_play_sound(RAW,0,1);
    audio_sound_pitch(RAW,pitch_a);
}
if (keyboard_check_released(ord('N')))
{
    audio_stop_sound(RAW);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press A#
if (keyboard_check_pressed(ord('J')))
{
    audio_play_sound(RAW,0,1);
    audio_sound_pitch(RAW,pitch_aM);
}
if (keyboard_check_released(ord('J')))
{
    audio_stop_sound(RAW);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press B
if (keyboard_check_pressed(ord('M')))
{
    audio_play_sound(RAW,0,1);
    audio_sound_pitch(RAW,pitch_b);
}
if (keyboard_check_released(ord('M')))
{
    audio_stop_sound(RAW);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///render octave text
draw_set_color($FFFFFF);
draw_text(2,2,"OCTAVE: "+string(octave));

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///say the key you're pressing
var _return;
_return = "NONE"
switch (keyboard_key)
{
    case(ord('Z')): _return = "C"; break;
    case(ord('S')): _return = "C\#"; break;
    case(ord('X')): _return = "D"; break;
    case(ord('D')): _return = "D\#"; break;
    case(ord('C')): _return = "E"; break;
    case(ord('V')): _return = "F"; break;
    case(ord('G')):_return = "F\#"; break;
    case(ord('B')): _return = "G"; break;
    case(ord('H')): _return = "G\#"; break;
    case(ord('N')): _return = "A"; break;
    case(ord('J')): _return = "A\#"; break;
    case(ord('M')): _return = "B"; break;
    default: _return = "NONE"; break;
}
draw_text(2,24,"Key you pressed: "+_return);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///display the type of waveform
var _ret;
_ret = "Square 50%"
switch (type)
{
    case(0): _ret = "Square - 50%"; break;
    case(1): _ret = "Square - 25%"; break;
    case(2): _ret = "Square - 12.5%"; break;
    case(3): _ret = "Triangle"; break;
    default: _ret = "Unknown"; break;
}
draw_text(2,46,"Waveform: "+_ret);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
